CCS PCH C Compiler, Version 4.104, 5967               23-nov-17 20:52

               Filename: C:\Users\Nícolas\Desktop\Robótica\Programação\2017\Modificações - Programa Lobo + Bernadete\Versão Final - Lobo + Bernadete\bernadete3kg_2017_beta.lst

               ROM used: 4682 bytes (29%)
                         Largest free fragment is 11698
               RAM used: 33 (4%) at main() level
                         54 (7%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  GOTO   1184
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   012A
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   00E4
0060:  BTFSS  FF2.5
0062:  GOTO   006C
0066:  BTFSC  FF2.2
0068:  GOTO   00AE
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /*-------------------------Versão 8.5-----------------------------------------*/ 
.................... #include<18f4431.h> 
.................... //////// Standard Header file for the PIC18F4431 device //////////////// 
.................... #device PIC18F4431 
.................... #list 
....................  
.................... #device adc=10 //Seta a resolução do conversor A/D em 10 bits 
.................... #fuses HS, NOWDT, NOPROTECT, NOBROWNOUT, PUT, NOLVP, FCMEN  
.................... #use delay(clock=20000000) 
*
02D0:  CLRF   FEA
02D2:  MOVLW  22
02D4:  MOVWF  FE9
02D6:  MOVF   FEF,W
02D8:  BZ    02F4
02DA:  MOVLW  06
02DC:  MOVWF  01
02DE:  CLRF   00
02E0:  DECFSZ 00,F
02E2:  BRA    02E0
02E4:  DECFSZ 01,F
02E6:  BRA    02DE
02E8:  MOVLW  7B
02EA:  MOVWF  00
02EC:  DECFSZ 00,F
02EE:  BRA    02EC
02F0:  DECFSZ FEF,F
02F2:  BRA    02DA
02F4:  RETLW  00
.................... #use rs232(BAUD=9600, UART1, XMIT=PIN_C6, RCV=PIN_C7, PARITY= N, BITS = 8, STREAM = BT) 
.................... #priority RDA, TIMER1, TIMER0 
.................... /*--------------------------Inclusão de Bibliotecas---------------------------*/ 
.................... #include "sumo3kg_library.c"  //Biblioteca entre "": mesmo diretório do projeto 
.................... #include "sumo3kg_library.h" 
.................... #ifndef pinos_sumo3kg_ 
.................... #define pinos_sumo3kg_ 
....................  
.................... #define lobo 1 
.................... #define bernadete 0 
.................... /*----------------------------Canais conversor A/D----------------------------*/ 
.................... #define linha_direita 5 
.................... #define linha_esquerda 6 
.................... #define distancia_direita 0 
.................... #define distancia_central 2 
.................... #define distancia_esquerda 3 
.................... /*----------------------------Pinagem dos sensores----------------------------*/ 
.................... /* 
.................... #define linha_direita PIN_A6 
.................... #define linha_esquerda PIN_A5 
.................... #define distancia_esquerda PIN_A3 
.................... #define distancia_central PIN_A0 
.................... #define distancia_direita PIN_A4 
.................... */ 
.................... /*---------------------------Pinagem dos Motores------------------------------*/ 
.................... #define motor_esquerda PIN_B6    /*arbitrario*/ 
.................... #define motor_direita PIN_B7     /*arbitrario*/ 
.................... /*-------------------------Modo teste do programa-----------------------------*/ 
.................... #define teste_controlado 0 
.................... /*-----------------------------------Luta-------------------------------------*/ 
.................... #define luta 1 
.................... /*------------------------Habilitação da ponte H------------------------------*/ 
.................... #define ENA_state 1 
.................... #define ENB_state 1 
.................... /*----------------------------Limiar Sensores---------------------------------*/ 
.................... #define limiar_distancia 470     /*****LIMIAR BERNADETE, REVER****/ 
.................... #define limiar_linha 800         /*****FAZER TESTES COM ELETRÔNICA****/ 
.................... /*-------------------------Frequência PWM-------------------------------------*/ 
.................... #define POWER_PWM_PERIOD 311 //simular no Proteus. Freq = +/- 16kHz 
.................... /*--------------------Habilitar função dos motores/TIMER0---------------------*/ 
.................... #define ON 1 
.................... #define OFF 0 
.................... /*--------------------------LEDs de uso geral---------------------------------*/ 
.................... #define LED1 PIN_D0 
.................... #define LED2 PIN_D1 
.................... #define LED3 PIN_D2 
.................... #define LED4 PIN_D3 
.................... /*--------------------------Protótipos----------------------------------------*/ 
.................... void Habilita_Motores(int1 estado); 
.................... void Portas_IO(); 
.................... void Configura_AD(); 
.................... int1 Leitura(int16 threshold, int8 canal); 
.................... void MoverMotores(int16 duty_esquerda, int16 duty_direita, char sentido); 
.................... int8 Seta_Sensores(char tipo); 
.................... void Motor_esq(int16 duty_esq, char sentido_esq); 
.................... void Motor_dir(int16 duty_dir, char sentido_dir); 
.................... #endif 
....................  
....................  
.................... int8 sensores = 0; 
.................... int8 sensor_anterior =0; 
.................... void Configura_Timer0(int1 estado) 
.................... { 
....................    if(estado == 1) 
*
02A2:  DECFSZ 20,W
02A4:  BRA    02B2
....................    { 
....................       setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
02A6:  MOVLW  C0
02A8:  MOVWF  FD5
....................       set_timer0(0); 
02AA:  CLRF   FD7
02AC:  CLRF   FD6
....................       enable_interrupts(INT_TIMER0); 
02AE:  BSF    FF2.5
....................        
....................        
....................    } 
....................    else   
02B0:  BRA    02B4
....................    { 
....................       disable_interrupts(INT_TIMER0); 
02B2:  BCF    FF2.5
....................       
....................    } 
.................... } 
02B4:  RETLW  00
....................  
.................... void Configura_Timer1(int1 estado) 
.................... { 
....................    if(estado == 1) 
02B6:  DECFSZ 20,W
02B8:  BRA    02CA
....................    { 
....................       setup_timer_1(T1_INTERNAL | T1_DIV_BY_2); 
02BA:  MOVLW  95
02BC:  MOVWF  FCD
....................       set_timer1(43035); 
02BE:  MOVLW  A8
02C0:  MOVWF  FCF
02C2:  MOVLW  1B
02C4:  MOVWF  FCE
....................       enable_interrupts(INT_TIMER1); 
02C6:  BSF    F9D.0
....................       
....................    } 
....................     
....................    else 
02C8:  BRA    02CC
....................    { 
....................       disable_interrupts(INT_TIMER1); 
02CA:  BCF    F9D.0
....................    } 
.................... } 
02CC:  GOTO   11DC (RETURN)
....................  
.................... void Habilita_Motores(int1 estado) 
.................... { 
....................       if(estado == ON) 
*
023C:  DECFSZ 20,W
023E:  BRA    026E
....................       { 
....................          setup_power_pwm_pins(PWM_BOTH_ON,PWM_BOTH_ON,PWM_BOTH_ON,PWM_BOTH_ON); // Configura os 4 módulos PWM. 
0240:  MOVLW  5F
0242:  MOVWF  F6F
....................          setup_power_pwm(PWM_FREE_RUN, 1, 0, POWER_PWM_PERIOD, 0, 1,33); 
0244:  MOVLW  FF
0246:  MOVWF  F6B
0248:  CLRF   F6E
024A:  CLRF   F7F
024C:  MOVLW  80
024E:  MOVWF  F7E
0250:  MOVLW  21
0252:  MOVWF  F6D
0254:  CLRF   F7D
0256:  CLRF   F7C
0258:  MOVLW  37
025A:  MOVWF  F7B
025C:  MOVLW  01
025E:  MOVWF  F7A
0260:  CLRF   F71
0262:  CLRF   F70
....................        
....................          if(ENA_state) 
....................          { 
....................             output_high(motor_esquerda); //Manda sinal para habilitar a ponteH do motor 1. 
0264:  BCF    F93.6
0266:  BSF    F8A.6
....................          } 
....................          else  
....................          { 
....................             output_low(motor_esquerda); //Manda sinal para desabilitar a ponteH do motor 1. 
....................          } 
....................     
....................          if(ENB_state)  
....................          { 
....................             output_high(motor_direita); //Manda sinal para habilitar a ponteH do motor 2. 
0268:  BCF    F93.7
026A:  BSF    F8A.7
....................          } 
....................          else  
....................          { 
....................             output_low(motor_direita); //Manda sinal para desabilitar a ponteH do motor 2 
....................          } 
....................       } 
....................        
....................       else 
026C:  BRA    0278
....................       { 
....................          setup_power_pwm_pins(PWM_OFF, PWM_OFF, PWM_OFF, PWM_OFF); 
026E:  CLRF   F6F
....................          output_low(motor_esquerda); 
0270:  BCF    F93.6
0272:  BCF    F8A.6
....................          output_low(motor_direita); 
0274:  BCF    F93.7
0276:  BCF    F8A.7
....................       } 
.................... } 
0278:  GOTO   11CC (RETURN)
....................  
.................... void Portas_IO() 
.................... { 
....................  
.................... /*set_tris_x(0bRX7 RX6 RX5 RX4 RX3 RX2 RX1 RX0);*/ 
.................... /*Pinos não utilizados serão setados como saída*/ 
....................  
....................    set_tris_a(0b11111111); 
*
0220:  MOVLW  FF
0222:  MOVWF  F92
....................    set_tris_b(0b00000000); //todos são saída, mas e os pinos de gravação (PGC E PGD) ? 
0224:  MOVLW  00
0226:  MOVWF  F93
....................    set_tris_c(0b10000110); //pinos RC3 e RC5 não são utilizados 
0228:  MOVLW  86
022A:  MOVWF  F94
....................    set_tris_d(0b00000000); 
022C:  MOVLW  00
022E:  MOVWF  F95
....................    set_tris_e(0b1111); 
0230:  BSF    F96.1
0232:  BSF    F96.1
0234:  BSF    F96.1
0236:  BSF    F96.1
.................... } 
0238:  GOTO   11C4 (RETURN)
....................  
.................... void Configura_AD() 
.................... { 
....................    setup_adc_ports(ALL_ANALOG); 
*
027C:  BSF    FB9.0
027E:  BCF    FC1.6
0280:  BCF    FC1.7
0282:  MOVLW  FF
0284:  MOVWF  FB8
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0286:  ANDLW  00
0288:  MOVWF  F9A
028A:  MOVF   FC0,W
028C:  ANDLW  80
028E:  IORLW  07
0290:  MOVWF  FC0
0292:  BCF    FC2.2
0294:  BCF    FC2.3
0296:  BCF    FC2.4
0298:  BCF    FC2.5
029A:  BSF    FC0.7
029C:  BSF    FC2.0
.................... } 
029E:  GOTO   11D0 (RETURN)
....................  
.................... void Motor_esq(int16 duty_esq, char sentido_esq) 
.................... { 
....................    switch(sentido_esq) 
....................    { 
*
06F6:  MOVF   28,W
06F8:  XORLW  66
06FA:  BZ    0708
06FC:  XORLW  04
06FE:  BZ    077C
0700:  XORLW  12
0702:  BTFSC  FD8.2
0704:  BRA    07F0
0706:  BRA    0800
....................       case 'f': set_power_pwm0_duty((int16)((POWER_PWM_PERIOD *4) * (duty_esq*0.01)));  
0708:  MOVFF  27,2A
070C:  MOVFF  26,29
0710:  RCALL  0596
0712:  MOVFF  03,2C
0716:  MOVFF  02,2B
071A:  MOVFF  01,2A
071E:  MOVFF  00,29
0722:  MOVLW  0A
0724:  MOVWF  30
0726:  MOVLW  D7
0728:  MOVWF  2F
072A:  MOVLW  23
072C:  MOVWF  2E
072E:  MOVLW  78
0730:  MOVWF  2D
0732:  RCALL  05CC
0734:  CLRF   2C
0736:  MOVLW  80
0738:  MOVWF  2B
073A:  MOVLW  1B
073C:  MOVWF  2A
073E:  MOVLW  89
0740:  MOVWF  29
0742:  MOVFF  03,30
0746:  MOVFF  02,2F
074A:  MOVFF  01,2E
074E:  MOVFF  00,2D
0752:  RCALL  05CC
0754:  MOVFF  03,2C
0758:  MOVFF  02,2B
075C:  MOVFF  01,2A
0760:  MOVFF  00,29
0764:  RCALL  06BE
0766:  BSF    F6E.1
0768:  MOVFF  01,F79
076C:  MOVFF  02,F78
0770:  BCF    F6E.1
....................                 set_power_pwm2_duty((int16)(0));  
0772:  BSF    F6E.1
0774:  CLRF   F77
0776:  CLRF   F76
0778:  BCF    F6E.1
....................                 break; 
077A:  BRA    0800
....................       case 'b': set_power_pwm0_duty((int16)(0)); 
077C:  BSF    F6E.1
077E:  CLRF   F79
0780:  CLRF   F78
0782:  BCF    F6E.1
....................                 set_power_pwm2_duty((int16)((POWER_PWM_PERIOD *4) * (duty_esq*0.01))); 
0784:  MOVFF  27,2A
0788:  MOVFF  26,29
078C:  RCALL  0596
078E:  MOVFF  03,2C
0792:  MOVFF  02,2B
0796:  MOVFF  01,2A
079A:  MOVFF  00,29
079E:  MOVLW  0A
07A0:  MOVWF  30
07A2:  MOVLW  D7
07A4:  MOVWF  2F
07A6:  MOVLW  23
07A8:  MOVWF  2E
07AA:  MOVLW  78
07AC:  MOVWF  2D
07AE:  RCALL  05CC
07B0:  CLRF   2C
07B2:  MOVLW  80
07B4:  MOVWF  2B
07B6:  MOVLW  1B
07B8:  MOVWF  2A
07BA:  MOVLW  89
07BC:  MOVWF  29
07BE:  MOVFF  03,30
07C2:  MOVFF  02,2F
07C6:  MOVFF  01,2E
07CA:  MOVFF  00,2D
07CE:  RCALL  05CC
07D0:  MOVFF  03,2C
07D4:  MOVFF  02,2B
07D8:  MOVFF  01,2A
07DC:  MOVFF  00,29
07E0:  RCALL  06BE
07E2:  BSF    F6E.1
07E4:  MOVFF  01,F77
07E8:  MOVFF  02,F76
07EC:  BCF    F6E.1
....................                 break; 
07EE:  BRA    0800
....................       case 'p': set_power_pwm0_duty((int16)(0)); 
07F0:  BSF    F6E.1
07F2:  CLRF   F79
07F4:  CLRF   F78
07F6:  BCF    F6E.1
....................                 set_power_pwm2_duty((int16)(0));    
07F8:  BSF    F6E.1
07FA:  CLRF   F77
07FC:  CLRF   F76
07FE:  BCF    F6E.1
....................    } 
.................... } 
0800:  RETLW  00
....................  
.................... void Motor_dir(int16 duty_dir, char sentido_dir) 
.................... { 
....................    switch(sentido_dir) 
....................    { 
0802:  MOVF   28,W
0804:  XORLW  62
0806:  BZ    0814
0808:  XORLW  04
080A:  BZ    0888
080C:  XORLW  16
080E:  BTFSC  FD8.2
0810:  BRA    08FC
0812:  BRA    090C
....................       case 'b': set_power_pwm4_duty((int16)((POWER_PWM_PERIOD *4) * (duty_dir*0.01)));  
0814:  MOVFF  27,2A
0818:  MOVFF  26,29
081C:  RCALL  0596
081E:  MOVFF  03,2C
0822:  MOVFF  02,2B
0826:  MOVFF  01,2A
082A:  MOVFF  00,29
082E:  MOVLW  0A
0830:  MOVWF  30
0832:  MOVLW  D7
0834:  MOVWF  2F
0836:  MOVLW  23
0838:  MOVWF  2E
083A:  MOVLW  78
083C:  MOVWF  2D
083E:  RCALL  05CC
0840:  CLRF   2C
0842:  MOVLW  80
0844:  MOVWF  2B
0846:  MOVLW  1B
0848:  MOVWF  2A
084A:  MOVLW  89
084C:  MOVWF  29
084E:  MOVFF  03,30
0852:  MOVFF  02,2F
0856:  MOVFF  01,2E
085A:  MOVFF  00,2D
085E:  RCALL  05CC
0860:  MOVFF  03,2C
0864:  MOVFF  02,2B
0868:  MOVFF  01,2A
086C:  MOVFF  00,29
0870:  RCALL  06BE
0872:  BSF    F6E.1
0874:  MOVFF  01,F75
0878:  MOVFF  02,F74
087C:  BCF    F6E.1
....................                 set_power_pwm6_duty((int16)(0));  
087E:  BSF    F6E.1
0880:  CLRF   F73
0882:  CLRF   F72
0884:  BCF    F6E.1
....................                 break; 
0886:  BRA    090C
....................       case 'f': set_power_pwm4_duty((int16)(0)); 
0888:  BSF    F6E.1
088A:  CLRF   F75
088C:  CLRF   F74
088E:  BCF    F6E.1
....................                 set_power_pwm6_duty((int16)((POWER_PWM_PERIOD *4) * (duty_dir*0.01))); 
0890:  MOVFF  27,2A
0894:  MOVFF  26,29
0898:  RCALL  0596
089A:  MOVFF  03,2C
089E:  MOVFF  02,2B
08A2:  MOVFF  01,2A
08A6:  MOVFF  00,29
08AA:  MOVLW  0A
08AC:  MOVWF  30
08AE:  MOVLW  D7
08B0:  MOVWF  2F
08B2:  MOVLW  23
08B4:  MOVWF  2E
08B6:  MOVLW  78
08B8:  MOVWF  2D
08BA:  RCALL  05CC
08BC:  CLRF   2C
08BE:  MOVLW  80
08C0:  MOVWF  2B
08C2:  MOVLW  1B
08C4:  MOVWF  2A
08C6:  MOVLW  89
08C8:  MOVWF  29
08CA:  MOVFF  03,30
08CE:  MOVFF  02,2F
08D2:  MOVFF  01,2E
08D6:  MOVFF  00,2D
08DA:  RCALL  05CC
08DC:  MOVFF  03,2C
08E0:  MOVFF  02,2B
08E4:  MOVFF  01,2A
08E8:  MOVFF  00,29
08EC:  RCALL  06BE
08EE:  BSF    F6E.1
08F0:  MOVFF  01,F73
08F4:  MOVFF  02,F72
08F8:  BCF    F6E.1
....................                 break; 
08FA:  BRA    090C
....................       case 'p': set_power_pwm4_duty((int16)(0)); 
08FC:  BSF    F6E.1
08FE:  CLRF   F75
0900:  CLRF   F74
0902:  BCF    F6E.1
....................                 set_power_pwm6_duty((int16)(0));    
0904:  BSF    F6E.1
0906:  CLRF   F73
0908:  CLRF   F72
090A:  BCF    F6E.1
....................    } 
.................... } 
090C:  RETLW  00
....................  
.................... void MoverMotores(int16 duty_esquerda, int16 duty_direita, char sentido) 
.................... { 
....................       switch(sentido) 
....................       { 
090E:  MOVF   25,W
0910:  XORLW  66
0912:  BZ    0926
0914:  XORLW  04
0916:  BZ    0944
0918:  XORLW  03
091A:  BZ    0962
091C:  XORLW  09
091E:  BZ    0980
0920:  XORLW  18
0922:  BZ    099E
0924:  BRA    09B4
....................             case 'f': 
....................             Motor_esq(duty_esquerda, 'f'); 
0926:  MOVFF  22,27
092A:  MOVFF  21,26
092E:  MOVLW  66
0930:  MOVWF  28
0932:  RCALL  06F6
....................             Motor_dir(duty_direita, 'f'); 
0934:  MOVFF  24,27
0938:  MOVFF  23,26
093C:  MOVLW  66
093E:  MOVWF  28
0940:  RCALL  0802
....................             break; 
0942:  BRA    09C8
....................           
....................             case 'b': 
....................             Motor_esq(duty_esquerda, 'b'); 
0944:  MOVFF  22,27
0948:  MOVFF  21,26
094C:  MOVLW  62
094E:  MOVWF  28
0950:  RCALL  06F6
....................             Motor_dir(duty_direita, 'b'); 
0952:  MOVFF  24,27
0956:  MOVFF  23,26
095A:  MOVLW  62
095C:  MOVWF  28
095E:  RCALL  0802
....................             break; 
0960:  BRA    09C8
....................              
....................             case 'a': /*arbitrario*/ 
....................             Motor_esq(duty_esquerda,'b'); 
0962:  MOVFF  22,27
0966:  MOVFF  21,26
096A:  MOVLW  62
096C:  MOVWF  28
096E:  RCALL  06F6
....................             Motor_dir(duty_direita,'f'); 
0970:  MOVFF  24,27
0974:  MOVFF  23,26
0978:  MOVLW  66
097A:  MOVWF  28
097C:  RCALL  0802
....................             break; 
097E:  BRA    09C8
....................           
....................             case 'h': /*arbitrario*/ 
....................             Motor_esq(duty_esquerda,'f'); 
0980:  MOVFF  22,27
0984:  MOVFF  21,26
0988:  MOVLW  66
098A:  MOVWF  28
098C:  RCALL  06F6
....................             Motor_dir(duty_direita,'b'); 
098E:  MOVFF  24,27
0992:  MOVFF  23,26
0996:  MOVLW  62
0998:  MOVWF  28
099A:  RCALL  0802
....................             break; 
099C:  BRA    09C8
....................             
....................       case 'p':  
....................             Motor_dir(0,'p'); 
099E:  CLRF   27
09A0:  CLRF   26
09A2:  MOVLW  70
09A4:  MOVWF  28
09A6:  RCALL  0802
....................             Motor_esq(0,'p'); 
09A8:  CLRF   27
09AA:  CLRF   26
09AC:  MOVLW  70
09AE:  MOVWF  28
09B0:  RCALL  06F6
....................             break; 
09B2:  BRA    09C8
....................           
....................      default:  
....................             Motor_dir(0,'p'); 
09B4:  CLRF   27
09B6:  CLRF   26
09B8:  MOVLW  70
09BA:  MOVWF  28
09BC:  RCALL  0802
....................             Motor_esq(0,'p'); 
09BE:  CLRF   27
09C0:  CLRF   26
09C2:  MOVLW  70
09C4:  MOVWF  28
09C6:  RCALL  06F6
....................    } 
....................              
.................... } 
09C8:  RETLW  00
....................  
.................... int1 Leitura(int16 threshold, int8 canal)   
.................... { 
*
0318:  CLRF   27
031A:  CLRF   26
....................    int16 leitura = 0; 
....................    switch(canal) 
....................    { 
031C:  MOVF   25,W
031E:  ADDLW  F9
0320:  BC    0354
0322:  ADDLW  07
0324:  GOTO   03C4
....................          case 5: set_adc_channel(linha_direita); break; 
0328:  MOVLW  10
032A:  MOVWF  F99
032C:  MOVLW  05
032E:  MOVWF  FC2
0330:  BRA    0354
....................          case 6 :set_adc_channel(linha_esquerda); break; 
0332:  MOVLW  04
0334:  MOVWF  F99
0336:  MOVLW  09
0338:  MOVWF  FC2
033A:  BRA    0354
....................          case 0: set_adc_channel(distancia_direita); break; 
033C:  CLRF   F99
033E:  MOVLW  01
0340:  MOVWF  FC2
0342:  BRA    0354
....................          case 3: set_adc_channel(distancia_esquerda); break; 
0344:  CLRF   F99
0346:  MOVLW  0D
0348:  MOVWF  FC2
034A:  BRA    0354
....................          case 2: set_adc_channel(distancia_central); break; 
034C:  CLRF   F99
034E:  MOVLW  09
0350:  MOVWF  FC2
0352:  BRA    0354
....................       //default: leitura = 0; 
....................    } 
....................     
....................    delay_us(10); 
0354:  MOVLW  10
0356:  MOVWF  00
0358:  DECFSZ 00,F
035A:  BRA    0358
035C:  NOP   
....................    leitura = read_adc(); 
035E:  BSF    FC2.1
0360:  BTFSC  FC2.1
0362:  BRA    0360
0364:  MOVFF  FC3,26
0368:  MOVFF  FC4,27
....................     
....................    if(canal == 5 || canal == 6)        /*Sensores de linha*/ 
036C:  MOVF   25,W
036E:  SUBLW  05
0370:  BZ    0378
0372:  MOVF   25,W
0374:  SUBLW  06
0376:  BNZ   0396
....................    { 
....................       if(leitura < threshold) 
0378:  MOVF   27,W
037A:  SUBWF  24,W
037C:  BNC   038E
037E:  BNZ   0386
0380:  MOVF   23,W
0382:  SUBWF  26,W
0384:  BC    038E
....................       { 
....................          return 1; 
0386:  MOVLW  01
0388:  MOVWF  01
038A:  BRA    03C2
....................       } 
....................        
....................       else 
038C:  BRA    0394
....................       { 
....................          return 0; 
038E:  MOVLW  00
0390:  MOVWF  01
0392:  BRA    03C2
....................       } 
....................    } 
....................     
....................       else if(canal == 0 || canal == 2 || canal == 3)    /*Sensores de distância*/ 
0394:  BRA    03C2
0396:  MOVF   25,F
0398:  BZ    03A6
039A:  MOVF   25,W
039C:  SUBLW  02
039E:  BZ    03A6
03A0:  MOVF   25,W
03A2:  SUBLW  03
03A4:  BNZ   03C2
....................       { 
....................          if(leitura < threshold) 
03A6:  MOVF   27,W
03A8:  SUBWF  24,W
03AA:  BNC   03BC
03AC:  BNZ   03B4
03AE:  MOVF   23,W
03B0:  SUBWF  26,W
03B2:  BC    03BC
....................          { 
....................             return 1; 
03B4:  MOVLW  01
03B6:  MOVWF  01
03B8:  BRA    03C2
....................          } 
....................        
....................          else 
03BA:  BRA    03C2
....................          { 
....................             return 0; 
03BC:  MOVLW  00
03BE:  MOVWF  01
03C0:  BRA    03C2
....................          } 
....................       } 
.................... } 
03C2:  RETLW  00
....................  
.................... int8 Seta_Sensores(char tipo) 
.................... { 
....................    int i;  
....................    switch(tipo) 
....................    { 
*
03F6:  MOVF   21,W
03F8:  XORLW  6C
03FA:  BZ    0408
03FC:  XORLW  08
03FE:  BZ    0464
0400:  XORLW  05
0402:  BTFSC  FD8.2
0404:  BRA    04DE
0406:  BRA    056A
....................     
....................       case 'l':   /*apenas sensores de linha ligados*/ 
....................        
....................          if(Leitura(limiar_linha,linha_esquerda)) 
0408:  MOVLW  03
040A:  MOVWF  24
040C:  MOVLW  20
040E:  MOVWF  23
0410:  MOVLW  06
0412:  MOVWF  25
0414:  RCALL  0318
0416:  MOVF   01,F
0418:  BZ    041E
....................          { 
....................             bit_set(sensores,4); 
041A:  BSF    17.4
....................          } 
....................        
....................          else  
041C:  BRA    0420
....................          { 
....................             bit_clear(sensores,4); 
041E:  BCF    17.4
....................          } 
....................        
....................          if(Leitura(limiar_linha,linha_direita)) 
0420:  MOVLW  03
0422:  MOVWF  24
0424:  MOVLW  20
0426:  MOVWF  23
0428:  MOVLW  05
042A:  MOVWF  25
042C:  RCALL  0318
042E:  MOVF   01,F
0430:  BZ    0436
....................          { 
....................             bit_set(sensores,3); 
0432:  BSF    17.3
....................          } 
....................        
....................          else  
0434:  BRA    0438
....................          { 
....................             bit_clear(sensores,3); 
0436:  BCF    17.3
....................          } 
....................        
....................          for(i = 0; i < 3; i++) //zera os 3 bits dos sensores de ditância 
0438:  CLRF   22
043A:  MOVF   22,W
043C:  SUBLW  02
043E:  BNC   045C
....................          { 
....................             bit_clear(sensores,i); 
0440:  MOVLW  01
0442:  MOVWF  00
0444:  MOVF   22,W
0446:  MOVWF  01
0448:  BZ    0452
044A:  BCF    FD8.0
044C:  RLCF   00,F
044E:  DECFSZ 01,F
0450:  BRA    044A
0452:  MOVF   00,W
0454:  XORLW  FF
0456:  ANDWF  17,F
....................          } 
0458:  INCF   22,F
045A:  BRA    043A
....................          return sensores; 
045C:  MOVFF  17,01
0460:  BRA    0594
....................          break; 
0462:  BRA    0594
....................        
....................       case 'd':   /*apenas sensores de ditância ligados*/ 
....................        
....................          if(Leitura(limiar_distancia,distancia_esquerda)) 
0464:  MOVLW  01
0466:  MOVWF  24
0468:  MOVLW  D6
046A:  MOVWF  23
046C:  MOVLW  03
046E:  MOVWF  25
0470:  RCALL  0318
0472:  MOVF   01,F
0474:  BZ    047A
....................          { 
....................             bit_set(sensores,2); 
0476:  BSF    17.2
....................          } 
....................        
....................          else 
0478:  BRA    047C
....................          { 
....................             bit_clear(sensores,2); 
047A:  BCF    17.2
....................          } 
....................           
....................          if(Leitura(limiar_distancia,distancia_central)) 
047C:  MOVLW  01
047E:  MOVWF  24
0480:  MOVLW  D6
0482:  MOVWF  23
0484:  MOVLW  02
0486:  MOVWF  25
0488:  RCALL  0318
048A:  MOVF   01,F
048C:  BZ    0492
....................          { 
....................             bit_set(sensores,1); 
048E:  BSF    17.1
....................          } 
....................        
....................          else 
0490:  BRA    0494
....................          { 
....................             bit_clear(sensores,1); 
0492:  BCF    17.1
....................          } 
....................           
....................          if(Leitura(limiar_distancia,distancia_direita)) 
0494:  MOVLW  01
0496:  MOVWF  24
0498:  MOVLW  D6
049A:  MOVWF  23
049C:  CLRF   25
049E:  RCALL  0318
04A0:  MOVF   01,F
04A2:  BZ    04A8
....................          { 
....................             bit_set(sensores,0); 
04A4:  BSF    17.0
....................          } 
....................        
....................          else 
04A6:  BRA    04AA
....................          { 
....................             bit_clear(sensores,0); 
04A8:  BCF    17.0
....................          } 
....................          for(i =3; i >= 3 && i <5; i++) 
04AA:  MOVLW  03
04AC:  MOVWF  22
04AE:  MOVF   22,W
04B0:  SUBLW  02
04B2:  BC    04D6
04B4:  MOVF   22,W
04B6:  SUBLW  04
04B8:  BNC   04D6
....................          { 
....................             bit_clear(sensores,i); 
04BA:  MOVLW  01
04BC:  MOVWF  00
04BE:  MOVF   22,W
04C0:  MOVWF  01
04C2:  BZ    04CC
04C4:  BCF    FD8.0
04C6:  RLCF   00,F
04C8:  DECFSZ 01,F
04CA:  BRA    04C4
04CC:  MOVF   00,W
04CE:  XORLW  FF
04D0:  ANDWF  17,F
....................          } 
04D2:  INCF   22,F
04D4:  BRA    04AE
....................          return sensores; 
04D6:  MOVFF  17,01
04DA:  BRA    0594
....................          break; 
04DC:  BRA    0594
....................           
....................           
....................       case 'a': /*todos os sensores ligados*/ 
....................           
....................          if(Leitura(limiar_linha,linha_esquerda)) 
04DE:  MOVLW  03
04E0:  MOVWF  24
04E2:  MOVLW  20
04E4:  MOVWF  23
04E6:  MOVLW  06
04E8:  MOVWF  25
04EA:  RCALL  0318
04EC:  MOVF   01,F
04EE:  BZ    04F4
....................          { 
....................             bit_set(sensores,4); 
04F0:  BSF    17.4
....................          } 
....................        
....................          else  
04F2:  BRA    04F6
....................          { 
....................             bit_clear(sensores,4); 
04F4:  BCF    17.4
....................          } 
....................        
....................          if(Leitura(limiar_linha,linha_direita)) 
04F6:  MOVLW  03
04F8:  MOVWF  24
04FA:  MOVLW  20
04FC:  MOVWF  23
04FE:  MOVLW  05
0500:  MOVWF  25
0502:  RCALL  0318
0504:  MOVF   01,F
0506:  BZ    050C
....................          { 
....................             bit_set(sensores,3); 
0508:  BSF    17.3
....................          } 
....................        
....................          else  
050A:  BRA    050E
....................          { 
....................             bit_clear(sensores,3); 
050C:  BCF    17.3
....................          } 
....................          if(Leitura(limiar_distancia,distancia_esquerda)) 
050E:  MOVLW  01
0510:  MOVWF  24
0512:  MOVLW  D6
0514:  MOVWF  23
0516:  MOVLW  03
0518:  MOVWF  25
051A:  RCALL  0318
051C:  MOVF   01,F
051E:  BZ    0524
....................          { 
....................             bit_set(sensores,2); 
0520:  BSF    17.2
....................          } 
....................        
....................          else 
0522:  BRA    0526
....................          { 
....................             bit_clear(sensores,2); 
0524:  BCF    17.2
....................          } 
....................           
....................          if(Leitura(limiar_distancia,distancia_central)) 
0526:  MOVLW  01
0528:  MOVWF  24
052A:  MOVLW  D6
052C:  MOVWF  23
052E:  MOVLW  02
0530:  MOVWF  25
0532:  RCALL  0318
0534:  MOVF   01,F
0536:  BZ    053C
....................          { 
....................             bit_set(sensores,1); 
0538:  BSF    17.1
....................          } 
....................        
....................          else 
053A:  BRA    053E
....................          { 
....................             bit_clear(sensores,1); 
053C:  BCF    17.1
....................          } 
....................           
....................          if(Leitura(limiar_distancia,distancia_direita)) 
053E:  MOVLW  01
0540:  MOVWF  24
0542:  MOVLW  D6
0544:  MOVWF  23
0546:  CLRF   25
0548:  RCALL  0318
054A:  MOVF   01,F
054C:  BZ    0552
....................          { 
....................             bit_set(sensores,0); 
054E:  BSF    17.0
....................          } 
....................        
....................          else 
0550:  BRA    0554
....................          { 
....................             bit_clear(sensores,0); 
0552:  BCF    17.0
....................          } 
....................           
....................          if(sensores != 0 && sensores < 0b00001000) 
0554:  MOVF   17,F
0556:  BZ    0562
0558:  MOVF   17,W
055A:  SUBLW  07
055C:  BNC   0562
....................          { 
....................             sensor_anterior = sensores; 
055E:  MOVFF  17,18
....................          } 
....................          return sensores; 
0562:  MOVFF  17,01
0566:  BRA    0594
....................          break; 
0568:  BRA    0594
....................           
....................     
....................        
....................       default: 
....................        
....................          for(i= 0; i < 5; i++) 
056A:  CLRF   22
056C:  MOVF   22,W
056E:  SUBLW  04
0570:  BNC   058E
....................          { 
....................             bit_clear(sensores,i); 
0572:  MOVLW  01
0574:  MOVWF  00
0576:  MOVF   22,W
0578:  MOVWF  01
057A:  BZ    0584
057C:  BCF    FD8.0
057E:  RLCF   00,F
0580:  DECFSZ 01,F
0582:  BRA    057C
0584:  MOVF   00,W
0586:  XORLW  FF
0588:  ANDWF  17,F
....................          } 
058A:  INCF   22,F
058C:  BRA    056C
....................          return sensores; 
058E:  MOVFF  17,01
0592:  BRA    0594
....................    } 
.................... } 
0594:  RETLW  00
....................  
....................  
....................  
.................... #if luta 
....................    #include "strategies.c" 
.................... #include "strategies.h" 
.................... #ifndef strategies3kg 
.................... #define strategies3kg  
.................... #include "sumo3kg_library.h" 
.................... #ifndef pinos_sumo3kg_ 
.................... #define pinos_sumo3kg_ 
....................  
.................... #define lobo 1 
.................... #define bernadete 0 
.................... /*----------------------------Canais conversor A/D----------------------------*/ 
.................... #define linha_direita 5 
.................... #define linha_esquerda 6 
.................... #define distancia_direita 0 
.................... #define distancia_central 2 
.................... #define distancia_esquerda 3 
.................... /*----------------------------Pinagem dos sensores----------------------------*/ 
.................... /* 
.................... #define linha_direita PIN_A6 
.................... #define linha_esquerda PIN_A5 
.................... #define distancia_esquerda PIN_A3 
.................... #define distancia_central PIN_A0 
.................... #define distancia_direita PIN_A4 
.................... */ 
.................... /*---------------------------Pinagem dos Motores------------------------------*/ 
.................... #define motor_esquerda PIN_B6    /*arbitrario*/ 
.................... #define motor_direita PIN_B7     /*arbitrario*/ 
.................... /*-------------------------Modo teste do programa-----------------------------*/ 
.................... #define teste_controlado 0 
.................... /*-----------------------------------Luta-------------------------------------*/ 
.................... #define luta 1 
.................... /*------------------------Habilitação da ponte H------------------------------*/ 
.................... #define ENA_state 1 
.................... #define ENB_state 1 
.................... /*----------------------------Limiar Sensores---------------------------------*/ 
.................... #define limiar_distancia 470     /*****LIMIAR BERNADETE, REVER****/ 
.................... #define limiar_linha 800         /*****FAZER TESTES COM ELETRÔNICA****/ 
.................... /*-------------------------Frequência PWM-------------------------------------*/ 
.................... #define POWER_PWM_PERIOD 311 //simular no Proteus. Freq = +/- 16kHz 
.................... /*--------------------Habilitar função dos motores/TIMER0---------------------*/ 
.................... #define ON 1 
.................... #define OFF 0 
.................... /*--------------------------LEDs de uso geral---------------------------------*/ 
.................... #define LED1 PIN_D0 
.................... #define LED2 PIN_D1 
.................... #define LED3 PIN_D2 
.................... #define LED4 PIN_D3 
.................... /*--------------------------Protótipos----------------------------------------*/ 
.................... void Habilita_Motores(int1 estado); 
.................... void Portas_IO(); 
.................... void Configura_AD(); 
.................... int1 Leitura(int16 threshold, int8 canal); 
.................... void MoverMotores(int16 duty_esquerda, int16 duty_direita, char sentido); 
.................... int8 Seta_Sensores(char tipo); 
.................... void Motor_esq(int16 duty_esq, char sentido_esq); 
.................... void Motor_dir(int16 duty_dir, char sentido_dir); 
.................... #endif 
....................  
.................... /*------------------------Numero de overflows timer0--------------------------*/ 
.................... #define ciclos0 2930 //3907   //número de overflows do TIMER0 
.................... #define ciclos1 30 
.................... #define ciclos_delay_movendo 10 //nº de contagens do timer1 para gerar delay de 90ms, com prescaler 2 e valor inicial 30  
.................... /*-----------------------Delay Inicial, caso necessário-----------------------*/ 
.................... #define atraso 960 
.................... #define tempo_parado 800 
.................... #define tempo_movendo 90 
.................... #define delay_arco_frente 450 //TODO: testar valores empiricamente  
.................... #define delay_arco_inverso 350 //TODO: testar valores empiricamente 
.................... #define delay_inverte_busca 80 
.................... #if lobo 
.................... #define delay_linha 215 
.................... #elif bernadete 
.................... #define delay_linha 320 
.................... #endif 
.................... #if lobo 
.................... #define delay_rotacao 140 
.................... #elif bernadete  
.................... #define delay_rotacao 290 
.................... #endif 
.................... /*-----------------------------Duty Cycles------------------------------------*/ 
.................... #define duty_frente 60 //duty cycle padrão para adversário à frente 
.................... #define duty_conquista 40 //duty cycle frente ESTRATÉGIA CONQUISTADOR 
.................... #define duty_busca 45 //50 //duty cycle padrão para busca de adversário 
.................... #define duty_tras_menor 50 //duty cycle quando encontra a linha branca no lado 1 
.................... #define duty_tras_maior 60 //duty cycle quando encontra a linha branco no lado 2  
.................... #define duty_tras 65 //duty cycle quando encontra a linha branca dos dois lados  
.................... #define duty_ofensiva 50 // duty cycle para correr de um lado para outro no dojo na estratégia Busca_Ofensiva() 
.................... #define duty_maximo 100 
.................... #if lobo 
.................... #define duty_arco_frente_menor 35 
.................... #define duty_arco_frente_maior 55 
.................... #elif bernadete 
.................... #define duty_arco_frente_menor 65 
.................... #define duty_arco_frente_maior 85 
.................... #endif 
.................... #define duty_arco_inverso_menor 50 
.................... #define duty_arco_inverso_maior 70 
.................... /*--------------------------Protótipos----------------------------------------*/ 
.................... void Basica(char lado); //estratégia mais básica, gira no prório eixo e ataca 
.................... void Inicializa(); //espera 5 segundos e pisca um LED a cada segundo  
.................... void Seleciona_Estrategia(); 
.................... /*-----------------------------Estratégias Bernadete--------------------------*/ 
....................    void Conquistador(char lado); //estratégia em que o robô anda e pára, no inicio (BERNADETE) 
....................    void Busca_arco(char lado); //estratégia que faz uma busca em arco, ao invés de buscar (BERNADETE)  
....................    void Arco_Inverso(char lado);  
.................... /*----------------------------Estrategias Lobo--------------------------------*/ 
....................    void Busca_Ofensiva(char lado); //estratégia para correr no dojo, LOBO 
....................    void Arco_Frente_Ofensiva(char lado); 
.................... #endif 
....................  
.................... int16 contador =0; //para controle do TIMER0 
.................... int8 seleciona =0; //seleciona a estratégia a ser utilizada  
.................... int1 troca_estado =1; //variável de estado para alterar rotação dos motores dentro da interrupção, de acordo com a estratégia 
.................... char seleciona_lado; //seleciona o lado  
.................... int1 primeira_busca =0; 
.................... int1 achei_linha =0; 
....................  
.................... #INT_TIMER0 
.................... void timer0_isr(void) 
.................... { 
....................    //clear_interrupt(INT_TIMER0); 
....................    contador++; 
*
00AE:  INCF   19,F
00B0:  BTFSC  FD8.2
00B2:  INCF   1A,F
....................    if(contador == ciclos0) //numero de vezes que ocorre overflow 
00B4:  MOVF   19,W
00B6:  SUBLW  72
00B8:  BNZ   00C8
00BA:  MOVF   1A,W
00BC:  SUBLW  0B
00BE:  BNZ   00C8
....................    { 
....................        
....................       //output_toggle(LED3); 
....................        
....................       if(troca_estado ==1) 
00C0:  BTFSS  1C.0
00C2:  BRA    00C6
....................          troca_estado = 0;          
00C4:  BCF    1C.0
....................    } 
....................     
....................    else if(contador == 2*ciclos0) 
00C6:  BRA    00DE
00C8:  MOVF   19,W
00CA:  SUBLW  E4
00CC:  BNZ   00DE
00CE:  MOVF   1A,W
00D0:  SUBLW  16
00D2:  BNZ   00DE
....................    { 
....................       contador =0; 
00D4:  CLRF   1A
00D6:  CLRF   19
....................       if(troca_estado ==0) 
00D8:  BTFSC  1C.0
00DA:  BRA    00DE
....................       { 
....................          troca_estado =1; 
00DC:  BSF    1C.0
....................       } 
....................        
....................    } 
.................... } 
....................  
00DE:  BCF    FF2.2
00E0:  GOTO   006C
.................... #INT_TIMER1 
.................... void timer1_isr(void) 
.................... { 
....................    contador++; 
00E4:  INCF   19,F
00E6:  BTFSC  FD8.2
00E8:  INCF   1A,F
....................    if(contador == ciclos_delay_movendo) 
00EA:  MOVF   19,W
00EC:  SUBLW  0A
00EE:  BNZ   0102
00F0:  MOVF   1A,F
00F2:  BNZ   0102
....................    { 
....................       contador =0; 
00F4:  CLRF   1A
00F6:  CLRF   19
....................       //output_toggle(LED3); 
....................       if(troca_estado ==1) 
00F8:  BTFSS  1C.0
00FA:  BRA    0100
....................       troca_estado =0; 
00FC:  BCF    1C.0
....................       else 
00FE:  BRA    0102
....................       troca_estado =1; 
0100:  BSF    1C.0
....................    } 
.................... } 
....................  
0102:  BCF    F9E.0
0104:  GOTO   006C
.................... void Conquistador(char lado) 
.................... { 
....................    //output_high(LED4); 
....................    if(primeira_busca == 0) 
*
0EE6:  BTFSC  1C.1
0EE8:  BRA    0F3E
....................    { 
....................       if(Seta_Sensores('a') == 0b00000000) 
0EEA:  MOVLW  61
0EEC:  MOVWF  21
0EEE:  CALL   03F6
0EF2:  MOVF   01,F
0EF4:  BNZ   0F2E
....................       { 
....................       MoverMotores(duty_frente, duty_frente, 'f'); 
0EF6:  CLRF   22
0EF8:  MOVLW  3C
0EFA:  MOVWF  21
0EFC:  CLRF   24
0EFE:  MOVWF  23
0F00:  MOVLW  66
0F02:  MOVWF  25
0F04:  RCALL  090E
....................       delay_ms(tempo_movendo); 
0F06:  MOVLW  5A
0F08:  MOVWF  22
0F0A:  CALL   02D0
....................       
....................       MoverMotores(0,0,'p'); 
0F0E:  CLRF   22
0F10:  CLRF   21
0F12:  CLRF   24
0F14:  CLRF   23
0F16:  MOVLW  70
0F18:  MOVWF  25
0F1A:  RCALL  090E
....................       delay_ms(tempo_parado); 
0F1C:  MOVLW  04
0F1E:  MOVWF  21
0F20:  MOVLW  C8
0F22:  MOVWF  22
0F24:  CALL   02D0
0F28:  DECFSZ 21,F
0F2A:  BRA    0F20
....................       } 
....................        
....................       else if(Seta_Sensores('a') != 0b00000000) 
0F2C:  BRA    0F3C
0F2E:  MOVLW  61
0F30:  MOVWF  21
0F32:  CALL   03F6
0F36:  MOVF   01,F
0F38:  BZ    0F3C
....................       { 
....................          primeira_busca =1; 
0F3A:  BSF    1C.1
....................       } 
....................     } 
....................      
....................     else if(primeira_busca ==1) 
0F3C:  BRA    10EA
0F3E:  BTFSS  1C.1
0F40:  BRA    10EA
....................     { 
....................       if(Seta_Sensores('a') == 0b00000000) 
0F42:  MOVLW  61
0F44:  MOVWF  21
0F46:  CALL   03F6
0F4A:  MOVF   01,F
0F4C:  BNZ   0FAE
....................       { 
....................          if(achei_linha == 0) 
0F4E:  BTFSC  1C.2
0F50:  BRA    0F64
....................          { 
....................             MoverMotores(duty_ofensiva, duty_ofensiva, 'f'); 
0F52:  CLRF   22
0F54:  MOVLW  32
0F56:  MOVWF  21
0F58:  CLRF   24
0F5A:  MOVWF  23
0F5C:  MOVLW  66
0F5E:  MOVWF  25
0F60:  RCALL  090E
....................          } 
....................        
....................          else if(achei_linha == 1) 
0F62:  BRA    0FAC
0F64:  BTFSS  1C.2
0F66:  BRA    0FAC
....................          { 
....................             switch(lado) 
....................             { 
0F68:  MOVF   20,W
0F6A:  XORLW  6C
0F6C:  BZ    0F74
0F6E:  XORLW  1E
0F70:  BZ    0F90
0F72:  BRA    0FAC
....................                case 'l': MoverMotores(duty_busca, duty_busca, 'a'); achei_linha=0; delay_ms(delay_rotacao); break; 
0F74:  CLRF   22
0F76:  MOVLW  2D
0F78:  MOVWF  21
0F7A:  CLRF   24
0F7C:  MOVWF  23
0F7E:  MOVLW  61
0F80:  MOVWF  25
0F82:  RCALL  090E
0F84:  BCF    1C.2
0F86:  MOVLW  8C
0F88:  MOVWF  22
0F8A:  CALL   02D0
0F8E:  BRA    0FAC
....................                case 'r': MoverMotores(duty_busca, duty_busca, 'h'); achei_linha=0; delay_ms(delay_rotacao); break; 
0F90:  CLRF   22
0F92:  MOVLW  2D
0F94:  MOVWF  21
0F96:  CLRF   24
0F98:  MOVWF  23
0F9A:  MOVLW  68
0F9C:  MOVWF  25
0F9E:  RCALL  090E
0FA0:  BCF    1C.2
0FA2:  MOVLW  8C
0FA4:  MOVWF  22
0FA6:  CALL   02D0
0FAA:  BRA    0FAC
....................             } 
....................          } 
....................       } 
....................     
....................       else if(Seta_Sensores('a') >= 0b00011000 && Seta_Sensores('a') <= 0b00011111) // caso 24 ao 31 
0FAC:  BRA    10EA
0FAE:  MOVLW  61
0FB0:  MOVWF  21
0FB2:  CALL   03F6
0FB6:  MOVF   01,W
0FB8:  SUBLW  17
0FBA:  BC    0FE6
0FBC:  MOVLW  61
0FBE:  MOVWF  21
0FC0:  CALL   03F6
0FC4:  MOVF   01,W
0FC6:  SUBLW  1F
0FC8:  BNC   0FE6
....................       { 
....................          MoverMotores(duty_tras,duty_tras,'b'); 
0FCA:  CLRF   22
0FCC:  MOVLW  41
0FCE:  MOVWF  21
0FD0:  CLRF   24
0FD2:  MOVWF  23
0FD4:  MOVLW  62
0FD6:  MOVWF  25
0FD8:  RCALL  090E
....................          achei_linha =1; 
0FDA:  BSF    1C.2
....................          delay_ms(delay_linha); 
0FDC:  MOVLW  D7
0FDE:  MOVWF  22
0FE0:  CALL   02D0
....................       } 
....................     
....................       else if(Seta_Sensores('a') >= 0b00010000 && Seta_Sensores('a') <= 0b00010111) //caso 16 ao 23 
0FE4:  BRA    10EA
0FE6:  MOVLW  61
0FE8:  MOVWF  21
0FEA:  CALL   03F6
0FEE:  MOVF   01,W
0FF0:  SUBLW  0F
0FF2:  BC    101E
0FF4:  MOVLW  61
0FF6:  MOVWF  21
0FF8:  CALL   03F6
0FFC:  MOVF   01,W
0FFE:  SUBLW  17
1000:  BNC   101E
....................       { 
....................          MoverMotores(duty_tras,duty_tras,'b'); //rever 
1002:  CLRF   22
1004:  MOVLW  41
1006:  MOVWF  21
1008:  CLRF   24
100A:  MOVWF  23
100C:  MOVLW  62
100E:  MOVWF  25
1010:  RCALL  090E
....................          achei_linha =1; 
1012:  BSF    1C.2
....................          delay_ms(delay_linha); 
1014:  MOVLW  D7
1016:  MOVWF  22
1018:  CALL   02D0
....................       } 
....................     
....................       else if(Seta_Sensores('a') >= 0b00001000 && Seta_Sensores('a') <= 0b00001111) //caso 8 ao 15 
101C:  BRA    10EA
101E:  MOVLW  61
1020:  MOVWF  21
1022:  CALL   03F6
1026:  MOVF   01,W
1028:  SUBLW  07
102A:  BC    1056
102C:  MOVLW  61
102E:  MOVWF  21
1030:  CALL   03F6
1034:  MOVF   01,W
1036:  SUBLW  0F
1038:  BNC   1056
....................       { 
....................          MoverMotores(duty_tras,duty_tras,'b'); //rever 
103A:  CLRF   22
103C:  MOVLW  41
103E:  MOVWF  21
1040:  CLRF   24
1042:  MOVWF  23
1044:  MOVLW  62
1046:  MOVWF  25
1048:  RCALL  090E
....................          achei_linha =1; 
104A:  BSF    1C.2
....................          delay_ms(delay_linha); 
104C:  MOVLW  D7
104E:  MOVWF  22
1050:  CALL   02D0
....................       } 
....................    //TODO: REVER CASO 5 PARA O LOBO   
....................       else if(Seta_Sensores('a') == 0b00000010 || Seta_Sensores('a') == 0b00000101  || Seta_Sensores('a') == 0b00000111 || Seta_Sensores('a') == 0b00000011 ||  Seta_Sensores('a') == 0b00000110 ) 
1054:  BRA    10EA
1056:  MOVLW  61
1058:  MOVWF  21
105A:  CALL   03F6
105E:  MOVF   01,W
1060:  SUBLW  02
1062:  BZ    109C
1064:  MOVLW  61
1066:  MOVWF  21
1068:  CALL   03F6
106C:  MOVF   01,W
106E:  SUBLW  05
1070:  BZ    109C
1072:  MOVLW  61
1074:  MOVWF  21
1076:  CALL   03F6
107A:  MOVF   01,W
107C:  SUBLW  07
107E:  BZ    109C
1080:  MOVLW  61
1082:  MOVWF  21
1084:  CALL   03F6
1088:  MOVF   01,W
108A:  SUBLW  03
108C:  BZ    109C
108E:  MOVLW  61
1090:  MOVWF  21
1092:  CALL   03F6
1096:  MOVF   01,W
1098:  SUBLW  06
109A:  BNZ   10AE
....................       { 
....................          MoverMotores(duty_frente,duty_frente,'f'); 
109C:  CLRF   22
109E:  MOVLW  3C
10A0:  MOVWF  21
10A2:  CLRF   24
10A4:  MOVWF  23
10A6:  MOVLW  66
10A8:  MOVWF  25
10AA:  RCALL  090E
....................       } 
....................     
....................       else if(Seta_Sensores('a') == 0b00000001) //caso 1, 3 e 5. Rever caso 5, pois é improvável 
10AC:  BRA    10EA
10AE:  MOVLW  61
10B0:  MOVWF  21
10B2:  CALL   03F6
10B6:  DECFSZ 01,W
10B8:  BRA    10CC
....................       { 
....................          MoverMotores(duty_busca,duty_busca,'h'); 
10BA:  CLRF   22
10BC:  MOVLW  2D
10BE:  MOVWF  21
10C0:  CLRF   24
10C2:  MOVWF  23
10C4:  MOVLW  68
10C6:  MOVWF  25
10C8:  RCALL  090E
....................       }   
....................     
....................       else if(Seta_Sensores('a') == 0b00000100) // caso 0, 4 e 6 
10CA:  BRA    10EA
10CC:  MOVLW  61
10CE:  MOVWF  21
10D0:  CALL   03F6
10D4:  MOVF   01,W
10D6:  SUBLW  04
10D8:  BNZ   10EA
....................       { 
....................          MoverMotores(duty_busca,duty_busca,'a'); 
10DA:  CLRF   22
10DC:  MOVLW  2D
10DE:  MOVWF  21
10E0:  CLRF   24
10E2:  MOVWF  23
10E4:  MOVLW  61
10E6:  MOVWF  25
10E8:  RCALL  090E
....................       } 
....................    } 
.................... } 
10EA:  RETLW  00
....................  
.................... void Arco_Inverso( char lado) 
.................... { 
....................    if(primeira_busca == 0) 
....................    { 
....................       if(Seta_Sensores('a') == 0b00000000) 
....................       { 
....................          switch(lado) 
....................          { 
....................             //TODO: rever os duty cycles desses cases 
....................             case 'r': MoverMotores(duty_arco_inverso_maior, duty_arco_inverso_menor, 'b'); delay_ms(delay_arco_inverso); primeira_busca =1; break; 
....................             case 'l': MoverMotores(duty_arco_inverso_menor, duty_arco_inverso_maior, 'b'); delay_ms(delay_arco_inverso); primeira_busca =1; break; 
....................          } 
....................       }       
....................    } 
....................     
....................    else if(primeira_busca == 1) 
....................    { 
....................       if(Seta_Sensores('a') == 0b00000000) 
....................       { 
....................          switch(lado) 
....................          { 
....................             case 'l': MoverMotores(duty_busca, duty_busca, 'a'); 
....................                      if(sensor_anterior == 0b00000001) 
....................                      { 
....................                         MoverMotores(duty_busca, duty_busca, 'h'); 
....................                      } 
....................                      break; 
....................             case 'r': MoverMotores(duty_busca, duty_busca, 'h');  
....................                      if(sensor_anterior == 0b00000100) 
....................                      { 
....................                         MoverMotores(duty_busca, duty_busca, 'a'); 
....................                      } 
....................                      break; 
....................          } 
....................       } 
....................       else if(Seta_Sensores('a') >= 0b00011000 && Seta_Sensores('a') <= 0b00011111) // caso 24 ao 31 
....................       { 
....................          MoverMotores(0,0,'p'); 
....................          delay_ms(30); 
....................          MoverMotores(duty_tras,duty_tras,'b'); 
....................          delay_ms(delay_linha); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') >= 0b00010000 && Seta_Sensores('a') <= 0b00010111) //caso 16 ao 23 
....................       { 
....................          MoverMotores(duty_tras,duty_tras,'b'); //rever 
....................          delay_ms(delay_linha); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') >= 0b00001000 && Seta_Sensores('a') <= 0b00001111) //caso 8 ao 15 
....................       { 
....................          MoverMotores(duty_tras,duty_tras,'b'); //rever 
....................          delay_ms(delay_linha); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') == 0b00000010 || Seta_Sensores('a') == 0b00000111 || Seta_Sensores('a') == 0b00000011 || Seta_Sensores('a') == 0b00000101) //caso 2 e 7, adversário de frente 
....................       { 
....................          MoverMotores(duty_frente,duty_frente,'f'); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') == 0b00000001) //caso 1, 3 e 5. Rever caso 5, pois é improvável 
....................       { 
....................          MoverMotores(duty_busca,duty_busca,'h'); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') == 0b00000100 ||  Seta_Sensores('a') == 0b00000110) // caso 0, 4 e 6 
....................       { 
....................          MoverMotores(duty_busca,duty_busca,'a'); 
....................       } 
....................    } 
.................... } 
....................  
.................... void Busca_Ofensiva(char lado) 
.................... { 
....................    if(Seta_Sensores('a') == 0b00000000) 
*
0B54:  MOVLW  61
0B56:  MOVWF  21
0B58:  RCALL  03F6
0B5A:  MOVF   01,F
0B5C:  BNZ   0BBE
....................    { 
....................       if(achei_linha == 0) 
0B5E:  BTFSC  1C.2
0B60:  BRA    0B74
....................       { 
....................          MoverMotores(duty_ofensiva, duty_ofensiva, 'f'); 
0B62:  CLRF   22
0B64:  MOVLW  32
0B66:  MOVWF  21
0B68:  CLRF   24
0B6A:  MOVWF  23
0B6C:  MOVLW  66
0B6E:  MOVWF  25
0B70:  RCALL  090E
....................       } 
....................        
....................       else if(achei_linha == 1) 
0B72:  BRA    0BBC
0B74:  BTFSS  1C.2
0B76:  BRA    0BBC
....................       { 
....................          switch(lado) 
....................          { 
0B78:  MOVF   20,W
0B7A:  XORLW  6C
0B7C:  BZ    0B84
0B7E:  XORLW  1E
0B80:  BZ    0BA0
0B82:  BRA    0BBC
....................             case 'l': MoverMotores(duty_busca, duty_busca, 'a'); achei_linha=0; delay_ms(delay_rotacao); break; 
0B84:  CLRF   22
0B86:  MOVLW  2D
0B88:  MOVWF  21
0B8A:  CLRF   24
0B8C:  MOVWF  23
0B8E:  MOVLW  61
0B90:  MOVWF  25
0B92:  RCALL  090E
0B94:  BCF    1C.2
0B96:  MOVLW  8C
0B98:  MOVWF  22
0B9A:  CALL   02D0
0B9E:  BRA    0BBC
....................             case 'r': MoverMotores(duty_busca, duty_busca, 'h'); achei_linha=0; delay_ms(delay_rotacao); break; 
0BA0:  CLRF   22
0BA2:  MOVLW  2D
0BA4:  MOVWF  21
0BA6:  CLRF   24
0BA8:  MOVWF  23
0BAA:  MOVLW  68
0BAC:  MOVWF  25
0BAE:  RCALL  090E
0BB0:  BCF    1C.2
0BB2:  MOVLW  8C
0BB4:  MOVWF  22
0BB6:  CALL   02D0
0BBA:  BRA    0BBC
....................          } 
....................       } 
....................    } 
....................     
....................    else if(Seta_Sensores('a') >= 0b00011000 && Seta_Sensores('a') <= 0b00011111) // caso 24 ao 31 
0BBC:  BRA    0CF6
0BBE:  MOVLW  61
0BC0:  MOVWF  21
0BC2:  RCALL  03F6
0BC4:  MOVF   01,W
0BC6:  SUBLW  17
0BC8:  BC    0BF2
0BCA:  MOVLW  61
0BCC:  MOVWF  21
0BCE:  RCALL  03F6
0BD0:  MOVF   01,W
0BD2:  SUBLW  1F
0BD4:  BNC   0BF2
....................    { 
....................       MoverMotores(duty_tras,duty_tras,'b'); 
0BD6:  CLRF   22
0BD8:  MOVLW  41
0BDA:  MOVWF  21
0BDC:  CLRF   24
0BDE:  MOVWF  23
0BE0:  MOVLW  62
0BE2:  MOVWF  25
0BE4:  RCALL  090E
....................       achei_linha =1; 
0BE6:  BSF    1C.2
....................       delay_ms(delay_linha); 
0BE8:  MOVLW  D7
0BEA:  MOVWF  22
0BEC:  CALL   02D0
....................    } 
....................     
....................    else if(Seta_Sensores('a') >= 0b00010000 && Seta_Sensores('a') <= 0b00010111) //caso 16 ao 23 
0BF0:  BRA    0CF6
0BF2:  MOVLW  61
0BF4:  MOVWF  21
0BF6:  CALL   03F6
0BFA:  MOVF   01,W
0BFC:  SUBLW  0F
0BFE:  BC    0C2A
0C00:  MOVLW  61
0C02:  MOVWF  21
0C04:  CALL   03F6
0C08:  MOVF   01,W
0C0A:  SUBLW  17
0C0C:  BNC   0C2A
....................    { 
....................       MoverMotores(duty_tras,duty_tras,'b'); //rever 
0C0E:  CLRF   22
0C10:  MOVLW  41
0C12:  MOVWF  21
0C14:  CLRF   24
0C16:  MOVWF  23
0C18:  MOVLW  62
0C1A:  MOVWF  25
0C1C:  RCALL  090E
....................       achei_linha =1; 
0C1E:  BSF    1C.2
....................       delay_ms(delay_linha); 
0C20:  MOVLW  D7
0C22:  MOVWF  22
0C24:  CALL   02D0
....................    } 
....................     
....................     else if(Seta_Sensores('a') >= 0b00001000 && Seta_Sensores('a') <= 0b00001111) //caso 8 ao 15 
0C28:  BRA    0CF6
0C2A:  MOVLW  61
0C2C:  MOVWF  21
0C2E:  CALL   03F6
0C32:  MOVF   01,W
0C34:  SUBLW  07
0C36:  BC    0C62
0C38:  MOVLW  61
0C3A:  MOVWF  21
0C3C:  CALL   03F6
0C40:  MOVF   01,W
0C42:  SUBLW  0F
0C44:  BNC   0C62
....................    { 
....................       MoverMotores(duty_tras,duty_tras,'b'); //rever 
0C46:  CLRF   22
0C48:  MOVLW  41
0C4A:  MOVWF  21
0C4C:  CLRF   24
0C4E:  MOVWF  23
0C50:  MOVLW  62
0C52:  MOVWF  25
0C54:  RCALL  090E
....................       achei_linha =1; 
0C56:  BSF    1C.2
....................       delay_ms(delay_linha); 
0C58:  MOVLW  D7
0C5A:  MOVWF  22
0C5C:  CALL   02D0
....................    } 
....................    //TODO: REVER CASO 5 PARA O LOBO   
....................    else if(Seta_Sensores('a') == 0b00000010 || Seta_Sensores('a') == 0b00000101  || Seta_Sensores('a') == 0b00000111 || Seta_Sensores('a') == 0b00000011 ||  Seta_Sensores('a') == 0b00000110 ) 
0C60:  BRA    0CF6
0C62:  MOVLW  61
0C64:  MOVWF  21
0C66:  CALL   03F6
0C6A:  MOVF   01,W
0C6C:  SUBLW  02
0C6E:  BZ    0CA8
0C70:  MOVLW  61
0C72:  MOVWF  21
0C74:  CALL   03F6
0C78:  MOVF   01,W
0C7A:  SUBLW  05
0C7C:  BZ    0CA8
0C7E:  MOVLW  61
0C80:  MOVWF  21
0C82:  CALL   03F6
0C86:  MOVF   01,W
0C88:  SUBLW  07
0C8A:  BZ    0CA8
0C8C:  MOVLW  61
0C8E:  MOVWF  21
0C90:  CALL   03F6
0C94:  MOVF   01,W
0C96:  SUBLW  03
0C98:  BZ    0CA8
0C9A:  MOVLW  61
0C9C:  MOVWF  21
0C9E:  CALL   03F6
0CA2:  MOVF   01,W
0CA4:  SUBLW  06
0CA6:  BNZ   0CBA
....................    { 
....................       MoverMotores(duty_frente,duty_frente,'f'); 
0CA8:  CLRF   22
0CAA:  MOVLW  3C
0CAC:  MOVWF  21
0CAE:  CLRF   24
0CB0:  MOVWF  23
0CB2:  MOVLW  66
0CB4:  MOVWF  25
0CB6:  RCALL  090E
....................    } 
....................     
....................    else if(Seta_Sensores('a') == 0b00000001) //caso 1, 3 e 5. Rever caso 5, pois é improvável 
0CB8:  BRA    0CF6
0CBA:  MOVLW  61
0CBC:  MOVWF  21
0CBE:  CALL   03F6
0CC2:  DECFSZ 01,W
0CC4:  BRA    0CD8
....................    { 
....................       MoverMotores(duty_busca,duty_busca,'h'); 
0CC6:  CLRF   22
0CC8:  MOVLW  2D
0CCA:  MOVWF  21
0CCC:  CLRF   24
0CCE:  MOVWF  23
0CD0:  MOVLW  68
0CD2:  MOVWF  25
0CD4:  RCALL  090E
....................    } 
....................     
....................    else if(Seta_Sensores('a') == 0b00000100) // caso 0, 4 e 6 
0CD6:  BRA    0CF6
0CD8:  MOVLW  61
0CDA:  MOVWF  21
0CDC:  CALL   03F6
0CE0:  MOVF   01,W
0CE2:  SUBLW  04
0CE4:  BNZ   0CF6
....................    { 
....................       MoverMotores(duty_busca,duty_busca,'a'); 
0CE6:  CLRF   22
0CE8:  MOVLW  2D
0CEA:  MOVWF  21
0CEC:  CLRF   24
0CEE:  MOVWF  23
0CF0:  MOVLW  61
0CF2:  MOVWF  25
0CF4:  RCALL  090E
....................    } 
.................... } 
0CF6:  RETLW  00
....................  
.................... void Busca_arco(char lado) //TODO: MUDAR IMPLEMENTAÇÃO 
.................... { 
....................    if(primeira_busca == 0) 
....................    { 
....................       if(Seta_Sensores('a')== 0) 
....................       { 
....................          Configura_Timer0(ON); 
....................          switch(lado) 
....................          { 
....................             case 'l':  
....................             if(troca_estado) 
....................             { 
....................                MoverMotores(duty_conquista,duty_conquista,'a'); 
....................             } 
....................        
....................             else if(!troca_estado) 
....................             { 
....................                MoverMotores(duty_conquista, duty_conquista, 'h'); 
....................             } 
....................             break; 
....................             case 'r':  
....................             if(troca_estado) 
....................             { 
....................                MoverMotores(duty_conquista,duty_conquista,'h'); 
....................             } 
....................        
....................             else if(!troca_estado) 
....................             { 
....................                MoverMotores(duty_conquista, duty_conquista, 'a'); 
....................             } 
....................             break; 
....................          } 
....................       } 
....................       else if(Seta_Sensores('a') != 0) 
....................       { 
....................          primeira_busca =1; 
....................       } 
....................    } 
....................     
....................    else if(primeira_busca ==1) 
....................    { 
....................       if(Seta_Sensores('a') == 0) 
....................       { 
....................          if(achei_linha ==0) 
....................          { 
....................          Configura_Timer0(OFF); 
....................          MoverMotores(duty_ofensiva, duty_ofensiva, 'f'); 
....................           
....................          } 
....................           
....................          else if(achei_linha == 1) 
....................          { 
....................             Configura_Timer0(OFF); 
....................             achei_linha=0; 
....................             MoverMotores(duty_busca, duty_busca, 'h'); 
....................             delay_ms(delay_rotacao); 
....................          } 
....................       } 
....................       else if(Seta_Sensores('a') >= 0b00011000 && Seta_Sensores('a') <= 0b00011111) // caso 24 ao 31 
....................       { 
....................          Configura_Timer0(OFF); 
....................          achei_linha =1; 
....................          MoverMotores(0,0,'p'); 
....................          delay_ms(30); 
....................          MoverMotores(duty_tras,duty_tras,'b'); 
....................          delay_ms(delay_linha); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') >= 0b00010000 && Seta_Sensores('a') <= 0b00010111) //caso 16 ao 23 
....................       { 
....................          Configura_Timer0(OFF); 
....................          achei_linha =1; 
....................          MoverMotores(0,0,'p'); 
....................          delay_ms(30); 
....................          MoverMotores(duty_tras,duty_tras,'b'); //rever 
....................          delay_ms(delay_linha); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') >= 0b00001000 && Seta_Sensores('a') <= 0b00001111) //caso 8 ao 15 
....................       { 
....................          Configura_Timer0(OFF); 
....................          achei_linha =1; 
....................          MoverMotores(0,0,'p'); 
....................          delay_ms(30); 
....................          MoverMotores(duty_tras,duty_tras,'b'); //rever 
....................          delay_ms(delay_linha); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') == 0b00000010 || Seta_Sensores('a') == 0b00000111 || Seta_Sensores('a') == 0b00000011 || Seta_Sensores('a') == 0b00000101 ||  Seta_Sensores('a') == 0b00000110) //caso 2 e 7, adversário de frente 
....................       { 
....................          Configura_Timer0(OFF); 
....................          MoverMotores(duty_frente,duty_frente,'f'); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') == 0b00000001) //caso 1 
....................       { 
....................          Configura_Timer0(OFF); 
....................          MoverMotores(duty_busca,duty_busca,'h'); 
....................       } 
....................     
....................       else if(Seta_Sensores('a') == 0b00000100) // caso 0, 4 e 6 
....................       { 
....................          Configura_Timer0(OFF); 
....................          MoverMotores(duty_busca,duty_busca,'a'); 
....................       } 
....................    } 
.................... } 
....................  
.................... /*---Estratégia 1(mais básica, busca rotacionando no próprio eixo e ataca )---*/ 
.................... //TODO: testtar se a lógica do sensor anterior funciona para a função básica 
.................... void Basica(char lado) 
.................... { 
....................    if(Seta_Sensores('a') == 0b00000000) 
*
09CA:  MOVLW  61
09CC:  MOVWF  21
09CE:  RCALL  03F6
09D0:  MOVF   01,F
09D2:  BNZ   0A3C
....................    { 
....................       switch(lado) 
....................       { 
09D4:  MOVF   20,W
09D6:  XORLW  6C
09D8:  BZ    09E0
09DA:  XORLW  1E
09DC:  BZ    0A0C
09DE:  BRA    0A3A
....................          case 'l': MoverMotores(duty_busca, duty_busca, 'a'); 
09E0:  CLRF   22
09E2:  MOVLW  2D
09E4:  MOVWF  21
09E6:  CLRF   24
09E8:  MOVWF  23
09EA:  MOVLW  61
09EC:  MOVWF  25
09EE:  RCALL  090E
....................                   if(sensor_anterior == 0b00000001) 
09F0:  DECFSZ 18,W
09F2:  BRA    0A0A
....................                   { 
....................                      MoverMotores(0,0,'p'); 
09F4:  CLRF   22
09F6:  CLRF   21
09F8:  CLRF   24
09FA:  CLRF   23
09FC:  MOVLW  70
09FE:  MOVWF  25
0A00:  RCALL  090E
....................                      delay_ms(delay_inverte_busca); 
0A02:  MOVLW  50
0A04:  MOVWF  22
0A06:  RCALL  02D0
....................                      sensor_anterior = 0; 
0A08:  CLRF   18
....................                      //MoverMotores(duty_busca, duty_busca, 'h'); 
....................                   } 
....................                   break; 
0A0A:  BRA    0A3A
....................          case 'r':  
....................                   MoverMotores(duty_busca, duty_busca, 'h');  
0A0C:  CLRF   22
0A0E:  MOVLW  2D
0A10:  MOVWF  21
0A12:  CLRF   24
0A14:  MOVWF  23
0A16:  MOVLW  68
0A18:  MOVWF  25
0A1A:  RCALL  090E
....................                   if(sensor_anterior == 0b00000100) 
0A1C:  MOVF   18,W
0A1E:  SUBLW  04
0A20:  BNZ   0A38
....................                   { 
....................                      MoverMotores(0,0,'p'); 
0A22:  CLRF   22
0A24:  CLRF   21
0A26:  CLRF   24
0A28:  CLRF   23
0A2A:  MOVLW  70
0A2C:  MOVWF  25
0A2E:  RCALL  090E
....................                      delay_ms(delay_inverte_busca); 
0A30:  MOVLW  50
0A32:  MOVWF  22
0A34:  RCALL  02D0
....................                      sensor_anterior =0; 
0A36:  CLRF   18
....................                      //MoverMotores(duty_busca, duty_busca, 'a'); 
....................                   } 
....................                   break; 
0A38:  BRA    0A3A
....................       } 
....................    } 
....................     
....................    else if(Seta_Sensores('a') >= 0b00011000 && Seta_Sensores('a') <= 0b00011111) // caso 24 ao 31 
0A3A:  BRA    0B52
0A3C:  MOVLW  61
0A3E:  MOVWF  21
0A40:  RCALL  03F6
0A42:  MOVF   01,W
0A44:  SUBLW  17
0A46:  BC    0A6C
0A48:  MOVLW  61
0A4A:  MOVWF  21
0A4C:  RCALL  03F6
0A4E:  MOVF   01,W
0A50:  SUBLW  1F
0A52:  BNC   0A6C
....................    { 
....................       MoverMotores(duty_tras,duty_tras,'b'); 
0A54:  CLRF   22
0A56:  MOVLW  41
0A58:  MOVWF  21
0A5A:  CLRF   24
0A5C:  MOVWF  23
0A5E:  MOVLW  62
0A60:  MOVWF  25
0A62:  RCALL  090E
....................       delay_ms(delay_linha); 
0A64:  MOVLW  D7
0A66:  MOVWF  22
0A68:  RCALL  02D0
....................    } 
....................     
....................    else if(Seta_Sensores('a') >= 0b00010000 && Seta_Sensores('a') <= 0b00010111) //caso 16 ao 23 
0A6A:  BRA    0B52
0A6C:  MOVLW  61
0A6E:  MOVWF  21
0A70:  RCALL  03F6
0A72:  MOVF   01,W
0A74:  SUBLW  0F
0A76:  BC    0A9C
0A78:  MOVLW  61
0A7A:  MOVWF  21
0A7C:  RCALL  03F6
0A7E:  MOVF   01,W
0A80:  SUBLW  17
0A82:  BNC   0A9C
....................    { 
....................       MoverMotores(duty_tras,duty_tras,'b'); //rever 
0A84:  CLRF   22
0A86:  MOVLW  41
0A88:  MOVWF  21
0A8A:  CLRF   24
0A8C:  MOVWF  23
0A8E:  MOVLW  62
0A90:  MOVWF  25
0A92:  RCALL  090E
....................       delay_ms(delay_linha); 
0A94:  MOVLW  D7
0A96:  MOVWF  22
0A98:  RCALL  02D0
....................    } 
....................     
....................     else if(Seta_Sensores('a') >= 0b00001000 && Seta_Sensores('a') <= 0b00001111) //caso 8 ao 15 
0A9A:  BRA    0B52
0A9C:  MOVLW  61
0A9E:  MOVWF  21
0AA0:  RCALL  03F6
0AA2:  MOVF   01,W
0AA4:  SUBLW  07
0AA6:  BC    0ACC
0AA8:  MOVLW  61
0AAA:  MOVWF  21
0AAC:  RCALL  03F6
0AAE:  MOVF   01,W
0AB0:  SUBLW  0F
0AB2:  BNC   0ACC
....................    { 
....................       MoverMotores(duty_tras,duty_tras,'b'); //rever 
0AB4:  CLRF   22
0AB6:  MOVLW  41
0AB8:  MOVWF  21
0ABA:  CLRF   24
0ABC:  MOVWF  23
0ABE:  MOVLW  62
0AC0:  MOVWF  25
0AC2:  RCALL  090E
....................       delay_ms(delay_linha); 
0AC4:  MOVLW  D7
0AC6:  MOVWF  22
0AC8:  RCALL  02D0
....................    } 
....................    //TODO: REVER CASO 5 PARA O LOBO   
....................    else if(Seta_Sensores('a') == 0b00000010 || Seta_Sensores('a') == 0b00000101  || Seta_Sensores('a') == 0b00000111 || Seta_Sensores('a') == 0b00000011 ||  Seta_Sensores('a') == 0b00000110 ) 
0ACA:  BRA    0B52
0ACC:  MOVLW  61
0ACE:  MOVWF  21
0AD0:  RCALL  03F6
0AD2:  MOVF   01,W
0AD4:  SUBLW  02
0AD6:  BZ    0B08
0AD8:  MOVLW  61
0ADA:  MOVWF  21
0ADC:  RCALL  03F6
0ADE:  MOVF   01,W
0AE0:  SUBLW  05
0AE2:  BZ    0B08
0AE4:  MOVLW  61
0AE6:  MOVWF  21
0AE8:  RCALL  03F6
0AEA:  MOVF   01,W
0AEC:  SUBLW  07
0AEE:  BZ    0B08
0AF0:  MOVLW  61
0AF2:  MOVWF  21
0AF4:  RCALL  03F6
0AF6:  MOVF   01,W
0AF8:  SUBLW  03
0AFA:  BZ    0B08
0AFC:  MOVLW  61
0AFE:  MOVWF  21
0B00:  RCALL  03F6
0B02:  MOVF   01,W
0B04:  SUBLW  06
0B06:  BNZ   0B1A
....................    { 
....................       MoverMotores(duty_frente,duty_frente,'f'); 
0B08:  CLRF   22
0B0A:  MOVLW  3C
0B0C:  MOVWF  21
0B0E:  CLRF   24
0B10:  MOVWF  23
0B12:  MOVLW  66
0B14:  MOVWF  25
0B16:  RCALL  090E
....................    } 
....................     
....................    else if(Seta_Sensores('a') == 0b00000001) //caso 1, 3 e 5. Rever caso 5, pois é improvável 
0B18:  BRA    0B52
0B1A:  MOVLW  61
0B1C:  MOVWF  21
0B1E:  RCALL  03F6
0B20:  DECFSZ 01,W
0B22:  BRA    0B36
....................    { 
....................       MoverMotores(duty_busca,duty_busca,'h'); 
0B24:  CLRF   22
0B26:  MOVLW  2D
0B28:  MOVWF  21
0B2A:  CLRF   24
0B2C:  MOVWF  23
0B2E:  MOVLW  68
0B30:  MOVWF  25
0B32:  RCALL  090E
....................    } 
....................     
....................    else if(Seta_Sensores('a') == 0b00000100) // caso 0, 4 e 6 
0B34:  BRA    0B52
0B36:  MOVLW  61
0B38:  MOVWF  21
0B3A:  RCALL  03F6
0B3C:  MOVF   01,W
0B3E:  SUBLW  04
0B40:  BNZ   0B52
....................    { 
....................       MoverMotores(duty_busca,duty_busca,'a'); 
0B42:  CLRF   22
0B44:  MOVLW  2D
0B46:  MOVWF  21
0B48:  CLRF   24
0B4A:  MOVWF  23
0B4C:  MOVLW  61
0B4E:  MOVWF  25
0B50:  RCALL  090E
....................    } 
.................... }    
0B52:  RETLW  00
....................  
.................... //TODO: rever implementação 
....................  
.................... void Arco_Frente_Ofensiva(char lado) 
.................... { 
....................    if(primeira_busca == 0) 
*
0CF8:  BTFSC  1C.1
0CFA:  BRA    0D62
....................    { 
....................       if(Seta_Sensores('a') == 0b00000000) 
0CFC:  MOVLW  61
0CFE:  MOVWF  21
0D00:  CALL   03F6
0D04:  MOVF   01,F
0D06:  BNZ   0D60
....................       { 
....................          switch(lado) 
....................          { 
0D08:  MOVF   20,W
0D0A:  XORLW  72
0D0C:  BZ    0D14
0D0E:  XORLW  1E
0D10:  BZ    0D3A
0D12:  BRA    0D60
....................             case 'r': MoverMotores(duty_arco_frente_maior, duty_arco_frente_menor, 'f'); delay_ms(delay_arco_frente); primeira_busca =1; break; 
0D14:  CLRF   22
0D16:  MOVLW  37
0D18:  MOVWF  21
0D1A:  CLRF   24
0D1C:  MOVLW  23
0D1E:  MOVWF  23
0D20:  MOVLW  66
0D22:  MOVWF  25
0D24:  RCALL  090E
0D26:  MOVLW  02
0D28:  MOVWF  21
0D2A:  MOVLW  E1
0D2C:  MOVWF  22
0D2E:  CALL   02D0
0D32:  DECFSZ 21,F
0D34:  BRA    0D2A
0D36:  BSF    1C.1
0D38:  BRA    0D60
....................             case 'l': MoverMotores(duty_arco_frente_menor, duty_arco_frente_maior, 'f'); delay_ms(delay_arco_frente); primeira_busca =1; break; 
0D3A:  CLRF   22
0D3C:  MOVLW  23
0D3E:  MOVWF  21
0D40:  CLRF   24
0D42:  MOVLW  37
0D44:  MOVWF  23
0D46:  MOVLW  66
0D48:  MOVWF  25
0D4A:  RCALL  090E
0D4C:  MOVLW  02
0D4E:  MOVWF  21
0D50:  MOVLW  E1
0D52:  MOVWF  22
0D54:  CALL   02D0
0D58:  DECFSZ 21,F
0D5A:  BRA    0D50
0D5C:  BSF    1C.1
0D5E:  BRA    0D60
....................          } 
....................       }       
....................    } 
....................     
....................    else if(primeira_busca == 1) 
0D60:  BRA    0EE4
0D62:  BTFSS  1C.1
0D64:  BRA    0EE4
....................    { 
....................       if(Seta_Sensores('a') == 0b00000000) 
0D66:  MOVLW  61
0D68:  MOVWF  21
0D6A:  CALL   03F6
0D6E:  MOVF   01,F
0D70:  BNZ   0DA8
....................       { 
....................          if(achei_linha == 0) 
0D72:  BTFSC  1C.2
0D74:  BRA    0D88
....................          { 
....................             MoverMotores(duty_ofensiva, duty_ofensiva, 'f'); 
0D76:  CLRF   22
0D78:  MOVLW  32
0D7A:  MOVWF  21
0D7C:  CLRF   24
0D7E:  MOVWF  23
0D80:  MOVLW  66
0D82:  MOVWF  25
0D84:  RCALL  090E
....................          } 
....................        
....................       else if(achei_linha == 1) 
0D86:  BRA    0DA6
0D88:  BTFSS  1C.2
0D8A:  BRA    0DA6
....................       { 
....................          achei_linha=0; 
0D8C:  BCF    1C.2
....................          MoverMotores(duty_busca, duty_busca, 'h'); 
0D8E:  CLRF   22
0D90:  MOVLW  2D
0D92:  MOVWF  21
0D94:  CLRF   24
0D96:  MOVWF  23
0D98:  MOVLW  68
0D9A:  MOVWF  25
0D9C:  RCALL  090E
....................          delay_ms(delay_rotacao); 
0D9E:  MOVLW  8C
0DA0:  MOVWF  22
0DA2:  CALL   02D0
....................       } 
....................       }   
....................     
....................    else if(Seta_Sensores('a') >= 0b00011000 && Seta_Sensores('a') <= 0b00011111) // caso 24 ao 31 
0DA6:  BRA    0EE4
0DA8:  MOVLW  61
0DAA:  MOVWF  21
0DAC:  CALL   03F6
0DB0:  MOVF   01,W
0DB2:  SUBLW  17
0DB4:  BC    0DE0
0DB6:  MOVLW  61
0DB8:  MOVWF  21
0DBA:  CALL   03F6
0DBE:  MOVF   01,W
0DC0:  SUBLW  1F
0DC2:  BNC   0DE0
....................    { 
....................       MoverMotores(duty_tras,duty_tras,'b'); 
0DC4:  CLRF   22
0DC6:  MOVLW  41
0DC8:  MOVWF  21
0DCA:  CLRF   24
0DCC:  MOVWF  23
0DCE:  MOVLW  62
0DD0:  MOVWF  25
0DD2:  RCALL  090E
....................       achei_linha =1; 
0DD4:  BSF    1C.2
....................       delay_ms(delay_linha); 
0DD6:  MOVLW  D7
0DD8:  MOVWF  22
0DDA:  CALL   02D0
....................    } 
....................     
....................    else if(Seta_Sensores('a') >= 0b00010000 && Seta_Sensores('a') <= 0b00010111) //caso 16 ao 23 
0DDE:  BRA    0EE4
0DE0:  MOVLW  61
0DE2:  MOVWF  21
0DE4:  CALL   03F6
0DE8:  MOVF   01,W
0DEA:  SUBLW  0F
0DEC:  BC    0E18
0DEE:  MOVLW  61
0DF0:  MOVWF  21
0DF2:  CALL   03F6
0DF6:  MOVF   01,W
0DF8:  SUBLW  17
0DFA:  BNC   0E18
....................    { 
....................       MoverMotores(duty_tras,duty_tras,'b'); //rever 
0DFC:  CLRF   22
0DFE:  MOVLW  41
0E00:  MOVWF  21
0E02:  CLRF   24
0E04:  MOVWF  23
0E06:  MOVLW  62
0E08:  MOVWF  25
0E0A:  RCALL  090E
....................       achei_linha =1; 
0E0C:  BSF    1C.2
....................       delay_ms(delay_linha); 
0E0E:  MOVLW  D7
0E10:  MOVWF  22
0E12:  CALL   02D0
....................    } 
....................     
....................     else if(Seta_Sensores('a') >= 0b00001000 && Seta_Sensores('a') <= 0b00001111) //caso 8 ao 15 
0E16:  BRA    0EE4
0E18:  MOVLW  61
0E1A:  MOVWF  21
0E1C:  CALL   03F6
0E20:  MOVF   01,W
0E22:  SUBLW  07
0E24:  BC    0E50
0E26:  MOVLW  61
0E28:  MOVWF  21
0E2A:  CALL   03F6
0E2E:  MOVF   01,W
0E30:  SUBLW  0F
0E32:  BNC   0E50
....................    { 
....................       MoverMotores(duty_tras,duty_tras,'b'); //rever 
0E34:  CLRF   22
0E36:  MOVLW  41
0E38:  MOVWF  21
0E3A:  CLRF   24
0E3C:  MOVWF  23
0E3E:  MOVLW  62
0E40:  MOVWF  25
0E42:  RCALL  090E
....................       achei_linha =1; 
0E44:  BSF    1C.2
....................       delay_ms(delay_linha); 
0E46:  MOVLW  D7
0E48:  MOVWF  22
0E4A:  CALL   02D0
....................    } 
....................    //TODO: REVER CASO 5 PARA O LOBO   
....................    else if(Seta_Sensores('a') == 0b00000010 || Seta_Sensores('a') == 0b00000101  || Seta_Sensores('a') == 0b00000111 || Seta_Sensores('a') == 0b00000011 ||  Seta_Sensores('a') == 0b00000110 ) 
0E4E:  BRA    0EE4
0E50:  MOVLW  61
0E52:  MOVWF  21
0E54:  CALL   03F6
0E58:  MOVF   01,W
0E5A:  SUBLW  02
0E5C:  BZ    0E96
0E5E:  MOVLW  61
0E60:  MOVWF  21
0E62:  CALL   03F6
0E66:  MOVF   01,W
0E68:  SUBLW  05
0E6A:  BZ    0E96
0E6C:  MOVLW  61
0E6E:  MOVWF  21
0E70:  CALL   03F6
0E74:  MOVF   01,W
0E76:  SUBLW  07
0E78:  BZ    0E96
0E7A:  MOVLW  61
0E7C:  MOVWF  21
0E7E:  CALL   03F6
0E82:  MOVF   01,W
0E84:  SUBLW  03
0E86:  BZ    0E96
0E88:  MOVLW  61
0E8A:  MOVWF  21
0E8C:  CALL   03F6
0E90:  MOVF   01,W
0E92:  SUBLW  06
0E94:  BNZ   0EA8
....................    { 
....................       MoverMotores(duty_frente,duty_frente,'f'); 
0E96:  CLRF   22
0E98:  MOVLW  3C
0E9A:  MOVWF  21
0E9C:  CLRF   24
0E9E:  MOVWF  23
0EA0:  MOVLW  66
0EA2:  MOVWF  25
0EA4:  RCALL  090E
....................    } 
....................     
....................    else if(Seta_Sensores('a') == 0b00000001) //caso 1, 3 e 5. Rever caso 5, pois é improvável 
0EA6:  BRA    0EE4
0EA8:  MOVLW  61
0EAA:  MOVWF  21
0EAC:  CALL   03F6
0EB0:  DECFSZ 01,W
0EB2:  BRA    0EC6
....................    { 
....................       MoverMotores(duty_busca,duty_busca,'h'); 
0EB4:  CLRF   22
0EB6:  MOVLW  2D
0EB8:  MOVWF  21
0EBA:  CLRF   24
0EBC:  MOVWF  23
0EBE:  MOVLW  68
0EC0:  MOVWF  25
0EC2:  RCALL  090E
....................    } 
....................     
....................    else if(Seta_Sensores('a') == 0b00000100) // caso 0, 4 e 6 
0EC4:  BRA    0EE4
0EC6:  MOVLW  61
0EC8:  MOVWF  21
0ECA:  CALL   03F6
0ECE:  MOVF   01,W
0ED0:  SUBLW  04
0ED2:  BNZ   0EE4
....................    { 
....................       MoverMotores(duty_busca,duty_busca,'a'); 
0ED4:  CLRF   22
0ED6:  MOVLW  2D
0ED8:  MOVWF  21
0EDA:  CLRF   24
0EDC:  MOVWF  23
0EDE:  MOVLW  61
0EE0:  MOVWF  25
0EE2:  RCALL  090E
....................    } 
....................    } 
.................... } 
0EE4:  RETLW  00
....................  
.................... void Inicializa() //função para simular os 5 segundos, à princípio, apenas para simulação 
.................... { 
....................    int i; 
....................    for(i=0; i < 5; i++) 
*
02F6:  CLRF   20
02F8:  MOVF   20,W
02FA:  SUBLW  04
02FC:  BNC   0314
....................    { 
....................       delay_ms(atraso); 
02FE:  MOVLW  04
0300:  MOVWF  21
0302:  MOVLW  F0
0304:  MOVWF  22
0306:  RCALL  02D0
0308:  DECFSZ 21,F
030A:  BRA    0302
....................       output_toggle(LED4); 
030C:  BCF    F95.3
030E:  BTG    F8C.3
....................    } 
0310:  INCF   20,F
0312:  BRA    02F8
.................... } 
0314:  GOTO   1204 (RETURN)
....................  
.................... void Seleciona_Estrategia() 
.................... { 
....................    switch(seleciona) 
....................    { 
*
10EC:  MOVF   1B,W
10EE:  XORLW  01
10F0:  BZ    1100
10F2:  XORLW  03
10F4:  BZ    111C
10F6:  XORLW  01
10F8:  BZ    1138
10FA:  XORLW  07
10FC:  BZ    1154
10FE:  BRA    1170
....................       case 1: if(seleciona_lado == 'l') 
1100:  MOVF   1D,W
1102:  SUBLW  6C
1104:  BNZ   110E
....................                Basica('l'); 
1106:  MOVLW  6C
1108:  MOVWF  20
110A:  RCALL  09CA
....................               else if(seleciona_lado == 'r') 
110C:  BRA    111A
110E:  MOVF   1D,W
1110:  SUBLW  72
1112:  BNZ   111A
....................                Basica('r'); 
1114:  MOVLW  72
1116:  MOVWF  20
1118:  RCALL  09CA
....................               break; 
111A:  BRA    1180
....................       case 2:  
....................                if(seleciona_lado == 'l') 
111C:  MOVF   1D,W
111E:  SUBLW  6C
1120:  BNZ   112A
....................                      Busca_Ofensiva('l'); 
1122:  MOVLW  6C
1124:  MOVWF  20
1126:  RCALL  0B54
....................                else if(seleciona_lado == 'r') 
1128:  BRA    1136
112A:  MOVF   1D,W
112C:  SUBLW  72
112E:  BNZ   1136
....................                      Busca_Ofensiva('r'); 
1130:  MOVLW  72
1132:  MOVWF  20
1134:  RCALL  0B54
....................                /*#if bernadete 
....................                   if(seleciona_lado == 'l') 
....................                      Busca_Ofensiva('l'); 
....................                   else if(seleciona_lado == 'r') 
....................                      Busca_Ofensiva('r'); 
....................                #elif lobo 
....................                   if(seleciona_lado == 'l') 
....................                      Busca_Ofensiva('l'); 
....................                   else if(seleciona_lado == 'r') 
....................                      Busca_Ofensiva('r'); 
....................                #endif*/ 
....................                break; 
1136:  BRA    1180
....................       case 3:   
....................                   if(seleciona_lado == 'l') 
1138:  MOVF   1D,W
113A:  SUBLW  6C
113C:  BNZ   1146
....................                         Arco_Frente_Ofensiva('l'); 
113E:  MOVLW  6C
1140:  MOVWF  20
1142:  RCALL  0CF8
....................                   else if(seleciona_lado == 'r') 
1144:  BRA    1152
1146:  MOVF   1D,W
1148:  SUBLW  72
114A:  BNZ   1152
....................                         Arco_Frente_Ofensiva('r'); 
114C:  MOVLW  72
114E:  MOVWF  20
1150:  RCALL  0CF8
....................                          
....................                   /*#if bernadete 
....................                      if(seleciona_lado == 'l') 
....................                         Arco_Frente_Ofensiva('l'); 
....................                      else if(seleciona_lado == 'r') 
....................                         Arco_Frente_Ofensiva('r'); 
....................                   #elif lobo 
....................                      if(seleciona_lado == 'l') 
....................                         Arco_Frente_Ofensiva('l'); 
....................                      else if(seleciona_lado == 'r') 
....................                         Arco_Frente_Ofensiva('r'); 
....................                   #endif*/ 
....................                break; 
1152:  BRA    1180
....................        case 4:    if(seleciona_lado == 'l') 
1154:  MOVF   1D,W
1156:  SUBLW  6C
1158:  BNZ   1162
....................                      Conquistador('l'); 
115A:  MOVLW  6C
115C:  MOVWF  20
115E:  RCALL  0EE6
....................                   else if(seleciona_lado == 'r') 
1160:  BRA    116E
1162:  MOVF   1D,W
1164:  SUBLW  72
1166:  BNZ   116E
....................                      Conquistador('r'); 
1168:  MOVLW  72
116A:  MOVWF  20
116C:  RCALL  0EE6
....................                break; 
116E:  BRA    1180
....................       default: MoverMotores(0,0,'p'); 
1170:  CLRF   22
1172:  CLRF   21
1174:  CLRF   24
1176:  CLRF   23
1178:  MOVLW  70
117A:  MOVWF  25
117C:  CALL   090E
....................    } 
.................... } 
1180:  GOTO   1210 (RETURN)
....................  
....................  
.................... #elif teste_controlado 
....................    #include "test.c" 
.................... #endif 
....................  
.................... char bluetooth; 
.................... int liga_led =0; 
.................... int1 parar_motores =1; 
.................... int1 troca; //variável para mudar o tipo de teste/estratégia 
.................... int1 ok =0; //variável para informar que o caracter correspondente à estratégia  
....................  
.................... #INT_RDA 
.................... void rda_isr() 
.................... { 
....................    bluetooth = getc(); 
*
012A:  BTFSS  F9E.5
012C:  BRA    012A
012E:  MOVFF  FAE,1E
....................    switch(bluetooth) 
....................          { 
0132:  MOVLW  61
0134:  SUBWF  1E,W
0136:  ADDLW  F8
0138:  BC    0164
013A:  ADDLW  08
013C:  GOTO   01A6
....................             #if luta  //TODO: IMPLEMENTAR ESTRATÉGIAS INICIAIS 
....................                case 'a':  seleciona =1; ok =1; break; 
0140:  MOVLW  01
0142:  MOVWF  1B
0144:  BSF    1C.5
0146:  BRA    0164
....................                case 'b':  seleciona =2; ok =1; break; 
0148:  MOVLW  02
014A:  MOVWF  1B
014C:  BSF    1C.5
014E:  BRA    0164
....................                case 'c':  seleciona =3; ok =1; break; 
0150:  MOVLW  03
0152:  MOVWF  1B
0154:  BSF    1C.5
0156:  BRA    0164
....................                case 'd':  seleciona =4; ok =1; break; 
0158:  MOVLW  04
015A:  MOVWF  1B
015C:  BSF    1C.5
015E:  BRA    0164
....................                case 'h':  parar_motores =1;  break; 
0160:  BSF    1C.3
0162:  BRA    0164
....................    
....................             #elif teste_controlado 
....................                case 'a':  controle =0; 
....................                           liga_led =1; 
....................                           parar_motores =0; 
....................                           break; 
....................                case 'b':  controle =8; 
....................                           liga_led =2; 
....................                           parar_motores =0;  
....................                           break; 
....................                case 'c':  controle =9; 
....................                           liga_led =3; 
....................                           parar_motores =0; 
....................                           break; 
....................                case '0': if(controle > 0) 
....................                            controle--; 
....................                          else if(controle ==0) 
....................                            { 
....................                               parar_motores =1;  
....................                            } 
....................                            break; 
....................        
....................                case '1':   if(controle < 9) 
....................                               controle++; 
....................                            else if(controle > 9) 
....................                               controle =99; 
....................                            break; 
....................                case 'h': parar_motores=1; 
....................                          controle =99; 
....................                          troca =0; 
....................                          break; 
....................       
....................             #endif 
....................          } 
....................    #if luta         
....................    if(ok ==1) 
0164:  BTFSS  1C.5
0166:  BRA    019C
....................    { 
....................       printf("\rEscolha o lado do adversario\r"); 
0168:  MOVLW  D0
016A:  MOVWF  FF6
016C:  MOVLW  01
016E:  MOVWF  FF7
0170:  RCALL  0108
....................       seleciona_lado =getc(); 
0172:  BTFSS  F9E.5
0174:  BRA    0172
0176:  MOVFF  FAE,1D
....................       switch(seleciona_lado) 
....................       { 
017A:  MOVF   1D,W
017C:  XORLW  72
017E:  BZ    0186
0180:  XORLW  1E
0182:  BZ    0190
0184:  BRA    019A
....................          case 'r': parar_motores = 0; liga_led =4; ok=0; break;  
0186:  BCF    1C.3
0188:  MOVLW  04
018A:  MOVWF  1F
018C:  BCF    1C.5
018E:  BRA    019A
....................          case 'l': parar_motores = 0; liga_led =4; ok=0; break; 
0190:  BCF    1C.3
0192:  MOVLW  04
0194:  MOVWF  1F
0196:  BCF    1C.5
0198:  BRA    019A
....................       } 
....................    } 
....................     
....................    else  
019A:  BRA    01A0
....................    { 
....................       liga_led =4; 
019C:  MOVLW  04
019E:  MOVWF  1F
....................    } 
....................    #endif 
.................... } 
....................  
....................  
01A0:  BCF    F9E.5
01A2:  GOTO   006C
.................... void main() 
.................... { 
*
1184:  CLRF   FF8
1186:  BCF    FD0.7
1188:  BSF    07.7
118A:  CLRF   FEA
118C:  CLRF   FE9
118E:  BSF    FAA.3
1190:  MOVLW  08
1192:  MOVWF  FAF
1194:  MOVLW  02
1196:  MOVWF  FB0
1198:  MOVLW  A6
119A:  MOVWF  FAC
119C:  MOVLW  90
119E:  MOVWF  FAB
11A0:  CLRF   17
11A2:  CLRF   18
11A4:  CLRF   1A
11A6:  CLRF   19
11A8:  CLRF   1B
11AA:  BSF    1C.0
11AC:  BCF    1C.1
11AE:  BCF    1C.2
11B0:  CLRF   1F
11B2:  BSF    1C.3
11B4:  BCF    1C.5
11B6:  BCF    FB9.0
11B8:  BCF    FC1.6
11BA:  BCF    FC1.7
11BC:  MOVLW  00
11BE:  MOVWF  FB8
....................    Portas_IO(); 
11C0:  GOTO   0220
....................    Habilita_Motores(ON); 
11C4:  MOVLW  01
11C6:  MOVWF  20
11C8:  GOTO   023C
....................    Configura_AD(); 
11CC:  GOTO   027C
....................    Configura_Timer0(OFF); 
11D0:  CLRF   20
11D2:  CALL   02A2
....................    Configura_Timer1(OFF); 
11D6:  CLRF   20
11D8:  GOTO   02B6
....................     
....................    #if bernadete 
....................       printf("Software Bernadete\r" "Data:"__DATE__ "\r" "Horario:"__TIME__ "\r"); 
....................       //printf("Local: "__FILE__ "\r"); 
....................    #elif lobo 
....................       printf("Software Lobo\r" "Data:"__DATE__ "\r" "Horario:"__TIME__ "\r"); 
11DC:  MOVLW  F0
11DE:  MOVWF  FF6
11E0:  MOVLW  01
11E2:  MOVWF  FF7
11E4:  CLRF   16
11E6:  BTFSC  FF2.7
11E8:  BSF    16.7
11EA:  BCF    FF2.7
11EC:  CALL   0108
11F0:  BTFSC  16.7
11F2:  BSF    FF2.7
....................       //printf("Local: "__FILE__ "\r"); 
....................    #endif 
....................    enable_interrupts(INT_RDA); 
11F4:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
11F6:  MOVLW  C0
11F8:  IORWF  FF2,F
....................     
....................    while(true) 
....................    { 
....................       //Configura_Timer0(ON); 
....................       do 
....................       { 
....................          #if luta 
....................             if(liga_led == 4) 
11FA:  MOVF   1F,W
11FC:  SUBLW  04
11FE:  BNZ   1206
....................             { 
....................                Inicializa(); 
1200:  GOTO   02F6
....................                troca =1; 
1204:  BSF    1C.4
....................             } 
....................              
....................              
....................          #elif teste_controlado 
....................             if(controle < 8) 
....................             { 
....................                output_high(LED1); 
....................                printf("\rModo teste: Motores\r"); 
....................                troca =1; 
....................             } 
....................             else if(controle == 8) 
....................             { 
....................                output_high(LED2); 
....................                printf("\rModo teste: Sensores de Distancia\r"); 
....................                troca =1; 
....................             } 
....................           
....................             else if(controle == 9) 
....................             { 
....................                output_high(LED3); 
....................                printf("\rModo teste: Sensores de Linha\r "); 
....................                troca =1; 
....................             } 
....................          #endif  
....................       }while(!troca); 
1206:  BTFSS  1C.4
1208:  BRA    11FA
....................        
....................       do 
....................       { 
....................          #if luta 
....................             output_high(LED4); 
120A:  BCF    F95.3
120C:  BSF    F8C.3
....................             Seleciona_Estrategia(); //checar defines para TIMER 0 e 1 
120E:  BRA    10EC
....................               
....................          #elif teste_controlado 
....................             Teste(); 
....................          #endif     
....................            
....................          if(parar_motores == 1) 
1210:  BTFSS  1C.3
1212:  BRA    1246
....................          { 
....................             MoverMotores(0,0,'p'); 
1214:  CLRF   22
1216:  CLRF   21
1218:  CLRF   24
121A:  CLRF   23
121C:  MOVLW  70
121E:  MOVWF  25
1220:  CALL   090E
....................             liga_led =0; 
1224:  CLRF   1F
....................             Configura_Timer0(OFF); 
1226:  CLRF   20
1228:  CALL   02A2
....................             troca =0; 
122C:  BCF    1C.4
....................             sensor_anterior =0; 
122E:  CLRF   18
....................             ok= 0; 
1230:  BCF    1C.5
....................             primeira_busca = 0; //HABILITAR NA LUTA, COMENTAR NO MODO TESTE 
1232:  BCF    1C.1
....................             achei_linha =0; //HABILITAR NA LUTA, COMENTAR NO MODO TESTE 
1234:  BCF    1C.2
....................             output_low(LED1);  
1236:  BCF    F95.0
1238:  BCF    F8C.0
....................             output_low(LED2); 
123A:  BCF    F95.1
123C:  BCF    F8C.1
....................             output_low(LED3); 
123E:  BCF    F95.2
1240:  BCF    F8C.2
....................             output_low(LED4); 
1242:  BCF    F95.3
1244:  BCF    F8C.3
....................              
....................          } 
....................       }while(troca); 
1246:  BTFSC  1C.4
1248:  BRA    120A
....................                
....................    } 
124A:  BRA    11FA
.................... } 
124C:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS IESO FCMEN
   Word  2: 3E0C   NOBROWNOUT NOWDT PUT NOWINEN WDT32768
   Word  3: 9D3C   T1LOWPOWER HPOL_HIGH LPOL_HIGH NOPWMPIN MCLR FLTAC1 SSP_RC PWM4B5 EXCLKC3
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
